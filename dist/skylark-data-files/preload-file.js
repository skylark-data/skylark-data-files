/**
 * skylark-data-files - The skylark file system library
 * @author Hudaokeji Co.,Ltd
 * @version v0.9.0
 * @link www.skylarkjs.org
 * @license MIT
 */
define(["skylark-langx-binary/buffer","./files","./error-codes","./file-error","./stats","./base-file","./utils"],function(t,s,e,i,h,r,n){"use strict";const{emptyBuffer:o}=n;return s.PreloadFile=class extends r{constructor(t,s,e,i,h){if(super(),this._pos=0,this._dirty=!1,this._fs=t,this._path=s,this._flag=e,this._stat=i,this._buffer=h||o(),this._stat.size!==this._buffer.length&&this._flag.isReadable())throw new Error(`Invalid buffer: Buffer is ${this._buffer.length} long, yet Stats object specifies that file is ${this._stat.size} long.`)}getBuffer(){return this._buffer}getStats(){return this._stat}getFlag(){return this._flag}getPath(){return this._path}getPos(){return this._flag.isAppendable()?this._stat.size:this._pos}advancePos(t){return this._pos+=t}setPos(t){return this._pos=t}sync(t){try{this.syncSync(),t()}catch(s){t(s)}}syncSync(){throw new i(e.ENOTSUP)}close(t){try{this.closeSync(),t()}catch(s){t(s)}}closeSync(){throw new i(e.ENOTSUP)}stat(t){try{t(null,h.clone(this._stat))}catch(s){t(s)}}statSync(){return h.clone(this._stat)}truncate(t,s){try{this.truncateSync(t),this._flag.isSynchronous()&&!fs.getRootFS().supportsSynch()&&this.sync(s),s()}catch(t){return s(t)}}truncateSync(s){if(this._dirty=!0,!this._flag.isWriteable())throw new i(e.EPERM,"File not opened with a writeable mode.");if(this._stat.mtimeMs=Date.now(),s>this._buffer.length){const e=t.alloc(s-this._buffer.length,0);return this.writeSync(e,0,e.length,this._buffer.length),void(this._flag.isSynchronous()&&fs.getRootFS().supportsSynch()&&this.syncSync())}this._stat.size=s;const h=t.alloc(s);this._buffer.copy(h,0,0,s),this._buffer=h,this._flag.isSynchronous()&&fs.getRootFS().supportsSynch()&&this.syncSync()}write(t,s,e,i,h){try{h(null,this.writeSync(t,s,e,i),t)}catch(t){h(t)}}writeSync(s,h,r,n){if(this._dirty=!0,void 0!==n&&null!==n||(n=this.getPos()),!this._flag.isWriteable())throw new i(e.EPERM,"File not opened with a writeable mode.");const o=n+r;if(o>this._stat.size&&(this._stat.size=o,o>this._buffer.length)){const s=t.alloc(o);this._buffer.copy(s),this._buffer=s}const c=s.copy(this._buffer,n,h,h+r);return this._stat.mtimeMs=Date.now(),this._flag.isSynchronous()?(this.syncSync(),c):(this.setPos(n+c),c)}read(t,s,e,i,h){try{h(null,this.readSync(t,s,e,i),t)}catch(t){h(t)}}readSync(t,s,h,r){if(!this._flag.isReadable())throw new i(e.EPERM,"File not opened with a readable mode.");void 0!==r&&null!==r||(r=this.getPos()),r+h>this._stat.size&&(h=this._stat.size-r);const n=this._buffer.copy(t,s,r,r+h);return this._stat.atimeMs=Date.now(),this._pos=r+h,n}chmod(t,s){try{this.chmodSync(t),s()}catch(t){s(t)}}chmodSync(t){if(!this._fs.supportsProps())throw new i(e.ENOTSUP);this._dirty=!0,this._stat.chmod(t),this.syncSync()}isDirty(){return this._dirty}resetDirty(){this._dirty=!1}}});
//# sourceMappingURL=sourcemaps/preload-file.js.map
