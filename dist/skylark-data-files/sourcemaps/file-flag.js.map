{"version":3,"sources":["file-flag.js"],"names":["define","files","ErrorCodes","FileError","ActionType","FileFlag","[object Object]","flagStr","this","validFlagStrs","indexOf","EINVAL","flagCache","hasOwnProperty","isExclusive","THROW_EXCEPTION","isTruncating","TRUNCATE_FILE","NOP","isWriteable","isAppendable","CREATE_FILE"],"mappings":";;;;;;;AAAAA,QACE,UACA,gBACA,eACA,iBACC,SAAUC,EAAMC,EAAWC,EAAUC,GACpC,mBAsBIC,EAMFC,YAAYC,GAER,GADAC,KAAKD,QAAUA,EACXF,EAASI,cAAcC,QAAQH,GAAW,EAC1C,MAAM,IAAIJ,EAAUD,EAAWS,OAAQ,iBAAmBJ,GASlED,mBAAmBC,GAEf,OAAIF,EAASO,UAAUC,eAAeN,GAC3BF,EAASO,UAAUL,GAEvBF,EAASO,UAAUL,GAAW,IAAIF,EAASE,GAKtDD,gBACI,OAAOE,KAAKD,QAKhBD,aACI,OAAsC,IAA/BE,KAAKD,QAAQG,QAAQ,OAA8C,IAA/BF,KAAKD,QAAQG,QAAQ,KAKpEJ,cACI,OAAsC,IAA/BE,KAAKD,QAAQG,QAAQ,OAA8C,IAA/BF,KAAKD,QAAQG,QAAQ,OAA8C,IAA/BF,KAAKD,QAAQG,QAAQ,KAKxGJ,eACI,OAAsC,IAA/BE,KAAKD,QAAQG,QAAQ,KAKhCJ,eACI,OAAsC,IAA/BE,KAAKD,QAAQG,QAAQ,KAKhCJ,gBACI,OAAsC,IAA/BE,KAAKD,QAAQG,QAAQ,KAKhCJ,cACI,OAAsC,IAA/BE,KAAKD,QAAQG,QAAQ,KAMhCJ,mBACI,OAAIE,KAAKM,cACEV,EAAWW,gBAEbP,KAAKQ,eACHZ,EAAWa,cAGXb,EAAWc,IAO1BZ,sBACI,OAAKE,KAAKW,eAAiBX,KAAKY,iBAAoC,OAAjBZ,KAAKD,QAC7CH,EAAWiB,YAGXjB,EAAWW,iBAW9B,OANAV,EAASO,aAETP,EAASI,eAAiB,IAAK,KAAM,KAAM,MAAO,IAAK,KAAM,KAAM,MAAO,IAAK,KAAM,KAAM,OAIpFR,EAAMI,SAAWA","file":"../file-flag.js","sourcesContent":["define([\r\n  \"./files\",\r\n  './error-codes',\r\n  \"./file-error\",\r\n  \"./action-type\"\r\n], function (files,ErrorCodes,FileError,ActionType) {\r\n    'use strict';\r\n\r\n\r\n\r\n  /**\r\n   * Represents one of the following file flags. A convenience object.\r\n   *\r\n   * * `'r'` - Open file for reading. An exception occurs if the file does not exist.\r\n   * * `'r+'` - Open file for reading and writing. An exception occurs if the file does not exist.\r\n   * * `'rs'` - Open file for reading in synchronous mode. Instructs the filesystem to not cache writes.\r\n   * * `'rs+'` - Open file for reading and writing, and opens the file in synchronous mode.\r\n   * * `'w'` - Open file for writing. The file is created (if it does not exist) or truncated (if it exists).\r\n   * * `'wx'` - Like 'w' but opens the file in exclusive mode.\r\n   * * `'w+'` - Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists).\r\n   * * `'wx+'` - Like 'w+' but opens the file in exclusive mode.\r\n   * * `'a'` - Open file for appending. The file is created if it does not exist.\r\n   * * `'ax'` - Like 'a' but opens the file in exclusive mode.\r\n   * * `'a+'` - Open file for reading and appending. The file is created if it does not exist.\r\n   * * `'ax+'` - Like 'a+' but opens the file in exclusive mode.\r\n   *\r\n   * Exclusive mode ensures that the file path is newly created.\r\n   */\r\n  class FileFlag {\r\n      /**\r\n       * This should never be called directly.\r\n       * @param modeStr The string representing the mode\r\n       * @throw when the mode string is invalid\r\n       */\r\n      constructor(flagStr) {\r\n          this.flagStr = flagStr;\r\n          if (FileFlag.validFlagStrs.indexOf(flagStr) < 0) {\r\n              throw new FileError(ErrorCodes.EINVAL, \"Invalid flag: \" + flagStr);\r\n          }\r\n      }\r\n      /**\r\n       * Get an object representing the given file flag.\r\n       * @param modeStr The string representing the flag\r\n       * @return The FileFlag object representing the flag\r\n       * @throw when the flag string is invalid\r\n       */\r\n      static getFileFlag(flagStr) {\r\n          // Check cache first.\r\n          if (FileFlag.flagCache.hasOwnProperty(flagStr)) {\r\n              return FileFlag.flagCache[flagStr];\r\n          }\r\n          return FileFlag.flagCache[flagStr] = new FileFlag(flagStr);\r\n      }\r\n      /**\r\n       * Get the underlying flag string for this flag.\r\n       */\r\n      getFlagString() {\r\n          return this.flagStr;\r\n      }\r\n      /**\r\n       * Returns true if the file is readable.\r\n       */\r\n      isReadable() {\r\n          return this.flagStr.indexOf('r') !== -1 || this.flagStr.indexOf('+') !== -1;\r\n      }\r\n      /**\r\n       * Returns true if the file is writeable.\r\n       */\r\n      isWriteable() {\r\n          return this.flagStr.indexOf('w') !== -1 || this.flagStr.indexOf('a') !== -1 || this.flagStr.indexOf('+') !== -1;\r\n      }\r\n      /**\r\n       * Returns true if the file mode should truncate.\r\n       */\r\n      isTruncating() {\r\n          return this.flagStr.indexOf('w') !== -1;\r\n      }\r\n      /**\r\n       * Returns true if the file is appendable.\r\n       */\r\n      isAppendable() {\r\n          return this.flagStr.indexOf('a') !== -1;\r\n      }\r\n      /**\r\n       * Returns true if the file is open in synchronous mode.\r\n       */\r\n      isSynchronous() {\r\n          return this.flagStr.indexOf('s') !== -1;\r\n      }\r\n      /**\r\n       * Returns true if the file is open in exclusive mode.\r\n       */\r\n      isExclusive() {\r\n          return this.flagStr.indexOf('x') !== -1;\r\n      }\r\n      /**\r\n       * Returns one of the static fields on this object that indicates the\r\n       * appropriate response to the path existing.\r\n       */\r\n      pathExistsAction() {\r\n          if (this.isExclusive()) {\r\n              return ActionType.THROW_EXCEPTION;\r\n          }\r\n          else if (this.isTruncating()) {\r\n              return ActionType.TRUNCATE_FILE;\r\n          }\r\n          else {\r\n              return ActionType.NOP;\r\n          }\r\n      }\r\n      /**\r\n       * Returns one of the static fields on this object that indicates the\r\n       * appropriate response to the path not existing.\r\n       */\r\n      pathNotExistsAction() {\r\n          if ((this.isWriteable() || this.isAppendable()) && this.flagStr !== 'r+') {\r\n              return ActionType.CREATE_FILE;\r\n          }\r\n          else {\r\n              return ActionType.THROW_EXCEPTION;\r\n          }\r\n      }\r\n  }\r\n  // Contains cached FileMode instances.\r\n  FileFlag.flagCache = {};\r\n  // Array of valid mode strings.\r\n  FileFlag.validFlagStrs = ['r', 'r+', 'rs', 'rs+', 'w', 'wx', 'w+', 'wx+', 'a', 'ax', 'a+', 'ax+'];\r\n\r\n\r\n\r\n  return files.FileFlag = FileFlag;\r\n});"]}