{"version":3,"sources":["inodes/dir-inode.js"],"names":["define","FileInode","isDirInode","inode","isDir","[object Object]","data","this","_ls","Stats","FileType","DIRECTORY","Object","keys","p","item","undefined"],"mappings":";;;;;;;AAAAA,UACG,WACC,aAqFA,OALAC,UAAUC,WAAc,SAAoBC,GACxC,QAASA,GAASA,EAAMC,eAxExBC,YAAYC,EAAO,MACfC,KAAKD,KAAOA,EACZC,KAAKC,OAETH,SACI,OAAO,EAEXA,QACI,OAAO,EAEXA,UAAY,OAAOE,KAAKD,KAMxBD,WACI,OAAO,IAAII,MAAMC,SAASC,UAAW,KAAM,KAO/CN,aACI,OAAOO,OAAOC,KAAKN,KAAKC,KAM5BH,QAAQS,GACJ,MAAMC,EAAOR,KAAKC,IAAIM,GACtB,OAAOC,GAAc,KAUzBV,QAAQS,EAAGX,GACP,QAAIW,KAAKP,KAAKC,MAGdD,KAAKC,IAAIM,GAAKX,EACP,IAQXE,QAAQS,GACJ,MAAMC,EAAOR,KAAKC,IAAIM,GACtB,YAAaE,IAATD,EACO,aAEJR,KAAKC,IAAIM,GACTC","file":"../../inodes/dir-inode.js","sourcesContent":["define([\r\n], function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * Inode for a directory. Currently only contains the directory listing.\r\n     */\r\n    class DirInode {\r\n        /**\r\n         * Constructs an inode for a directory.\r\n         */\r\n        constructor(data = null) {\r\n            this.data = data;\r\n            this._ls = {};\r\n        }\r\n        isFile() {\r\n            return false;\r\n        }\r\n        isDir() {\r\n            return true;\r\n        }\r\n        getData() { return this.data; }\r\n        /**\r\n         * Return a Stats object for this inode.\r\n         * @todo Should probably remove this at some point. This isn't the\r\n         *       responsibility of the FileIndex.\r\n         */\r\n        getStats() {\r\n            return new Stats(FileType.DIRECTORY, 4096, 0x16D);\r\n        }\r\n        /**\r\n         * Returns the directory listing for this directory. Paths in the directory are\r\n         * relative to the directory's path.\r\n         * @return The directory listing for this directory.\r\n         */\r\n        getListing() {\r\n            return Object.keys(this._ls);\r\n        }\r\n        /**\r\n         * Returns the inode for the indicated item, or null if it does not exist.\r\n         * @param p Name of item in this directory.\r\n         */\r\n        getItem(p) {\r\n            const item = this._ls[p];\r\n            return item ? item : null;\r\n        }\r\n        /**\r\n         * Add the given item to the directory listing. Note that the given inode is\r\n         * not copied, and will be mutated by the DirInode if it is a DirInode.\r\n         * @param p Item name to add to the directory listing.\r\n         * @param inode The inode for the\r\n         *   item to add to the directory inode.\r\n         * @return True if it was added, false if it already existed.\r\n         */\r\n        addItem(p, inode) {\r\n            if (p in this._ls) {\r\n                return false;\r\n            }\r\n            this._ls[p] = inode;\r\n            return true;\r\n        }\r\n        /**\r\n         * Removes the given item from the directory listing.\r\n         * @param p Name of item to remove from the directory listing.\r\n         * @return Returns the item\r\n         *   removed, or null if the item did not exist.\r\n         */\r\n        remItem(p) {\r\n            const item = this._ls[p];\r\n            if (item === undefined) {\r\n                return null;\r\n            }\r\n            delete this._ls[p];\r\n            return item;\r\n        }\r\n    }\r\n\r\n    /**\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    FileInode.isDirInode =  function isDirInode(inode) {\r\n        return !!inode && inode.isDir();\r\n    }\r\n\r\n\r\n    return DirInode;\r\n});"]}