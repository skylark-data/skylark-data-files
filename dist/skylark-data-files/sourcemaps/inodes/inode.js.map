{"version":3,"sources":["inodes/inode.js"],"names":["define","Buffer","Stats","FileType","Inode","[object Object]","id","size","mode","atime","mtime","ctime","this","buffer","undefined","Error","toString","readUInt32LE","readUInt16LE","readDoubleLE","DIRECTORY","FILE","length","buff","alloc","getSize","writeUInt32LE","writeUInt16LE","writeDoubleLE","write","stats","hasChanged","atimeMs","getTime","mtimeMs","ctimeMs"],"mappings":";;;;;;;AAAAA,QACI,8BACA,WACA,gBACD,SAAUC,EAAOC,EAAMC,GACtB,mBAMMC,EACFC,YAAYC,EAAIC,EAAMC,EAAMC,EAAOC,EAAOC,GACtCC,KAAKN,GAAKA,EACVM,KAAKL,KAAOA,EACZK,KAAKJ,KAAOA,EACZI,KAAKH,MAAQA,EACbG,KAAKF,MAAQA,EACbE,KAAKD,MAAQA,EAMjBN,kBAAkBQ,GACd,QAAeC,IAAXD,EACA,MAAM,IAAIE,MAAM,MAEpB,OAAO,IAAIX,EAAMS,EAAOG,SAAS,QAAS,IAAKH,EAAOI,aAAa,GAAIJ,EAAOK,aAAa,GAAIL,EAAOM,aAAa,GAAIN,EAAOM,aAAa,IAAKN,EAAOM,aAAa,KAMxKd,UACI,OAAO,IAAIH,GAAmB,MAAZU,KAAKJ,QAAmBL,EAASiB,UAAYjB,EAASiB,UAAYjB,EAASkB,KAAMT,KAAKL,KAAMK,KAAKJ,KAAMI,KAAKH,MAAOG,KAAKF,MAAOE,KAAKD,OAM1JN,UAEI,OAAO,GAAKO,KAAKN,GAAGgB,OAMxBjB,SAASkB,EAAOtB,EAAOuB,MAAMZ,KAAKa,YAO9B,OANAF,EAAKG,cAAcd,KAAKL,KAAM,GAC9BgB,EAAKI,cAAcf,KAAKJ,KAAM,GAC9Be,EAAKK,cAAchB,KAAKH,MAAO,GAC/Bc,EAAKK,cAAchB,KAAKF,MAAO,IAC/Ba,EAAKK,cAAchB,KAAKD,MAAO,IAC/BY,EAAKM,MAAMjB,KAAKN,GAAI,GAAIM,KAAKN,GAAGgB,OAAQ,SACjCC,EAaXlB,OAAOyB,GACH,IAAIC,GAAa,EACbnB,KAAKL,OAASuB,EAAMvB,OACpBK,KAAKL,KAAOuB,EAAMvB,KAClBwB,GAAa,GAEbnB,KAAKJ,OAASsB,EAAMtB,OACpBI,KAAKJ,KAAOsB,EAAMtB,KAClBuB,GAAa,GAEjB,MAAMC,EAAUF,EAAMrB,MAAMwB,UACxBrB,KAAKH,QAAUuB,IACfpB,KAAKH,MAAQuB,EACbD,GAAa,GAEjB,MAAMG,EAAUJ,EAAMpB,MAAMuB,UACxBrB,KAAKF,QAAUwB,IACftB,KAAKF,MAAQwB,EACbH,GAAa,GAEjB,MAAMI,EAAUL,EAAMnB,MAAMsB,UAK5B,OAJIrB,KAAKD,QAAUwB,IACfvB,KAAKD,MAAQwB,EACbJ,GAAa,GAEVA,EAOX1B,SACI,OAAoB,MAAZO,KAAKJ,QAAmBL,EAASkB,KAK7ChB,cACI,OAAoB,MAAZO,KAAKJ,QAAmBL,EAASiB,WAKjD,OAAOhB","file":"../../inodes/inode.js","sourcesContent":["define([\r\n    \"skylark-langx-binary/buffer\",\r\n    '../stats',\r\n    '../file-type'\r\n], function (Buffer,Stats,FileType) {\r\n    'use strict';\r\n\r\n\r\n    /**\r\n     * Generic inode definition that can easily be serialized.\r\n     */\r\n    class Inode {\r\n        constructor(id, size, mode, atime, mtime, ctime) {\r\n            this.id = id;\r\n            this.size = size;\r\n            this.mode = mode;\r\n            this.atime = atime;\r\n            this.mtime = mtime;\r\n            this.ctime = ctime;\r\n        }\r\n\r\n        /**\r\n         * Converts the buffer into an Inode.\r\n         */\r\n        static fromBuffer(buffer) {\r\n            if (buffer === undefined) {\r\n                throw new Error(\"NO\");\r\n            }\r\n            return new Inode(buffer.toString('ascii', 30), buffer.readUInt32LE(0), buffer.readUInt16LE(4), buffer.readDoubleLE(6), buffer.readDoubleLE(14), buffer.readDoubleLE(22));\r\n        }\r\n\r\n        /**\r\n         * Handy function that converts the Inode to a Node Stats object.\r\n         */\r\n        toStats() {\r\n            return new Stats((this.mode & 0xF000) === FileType.DIRECTORY ? FileType.DIRECTORY : FileType.FILE, this.size, this.mode, this.atime, this.mtime, this.ctime);\r\n        }\r\n\r\n        /**\r\n         * Get the size of this Inode, in bytes.\r\n         */\r\n        getSize() {\r\n            // ASSUMPTION: ID is ASCII (1 byte per char).\r\n            return 30 + this.id.length;\r\n        }\r\n\r\n        /**\r\n         * Writes the inode into the start of the buffer.\r\n         */\r\n        toBuffer(buff = Buffer.alloc(this.getSize())) {\r\n            buff.writeUInt32LE(this.size, 0);\r\n            buff.writeUInt16LE(this.mode, 4);\r\n            buff.writeDoubleLE(this.atime, 6);\r\n            buff.writeDoubleLE(this.mtime, 14);\r\n            buff.writeDoubleLE(this.ctime, 22);\r\n            buff.write(this.id, 30, this.id.length, 'ascii');\r\n            return buff;\r\n        }\r\n        \r\n        /**\r\n         * Updates the Inode using information from the stats object. Used by file\r\n         * systems at sync time, e.g.:\r\n         * - Program opens file and gets a File object.\r\n         * - Program mutates file. File object is responsible for maintaining\r\n         *   metadata changes locally -- typically in a Stats object.\r\n         * - Program closes file. File object's metadata changes are synced with the\r\n         *   file system.\r\n         * @return True if any changes have occurred.\r\n         */\r\n        update(stats) {\r\n            let hasChanged = false;\r\n            if (this.size !== stats.size) {\r\n                this.size = stats.size;\r\n                hasChanged = true;\r\n            }\r\n            if (this.mode !== stats.mode) {\r\n                this.mode = stats.mode;\r\n                hasChanged = true;\r\n            }\r\n            const atimeMs = stats.atime.getTime();\r\n            if (this.atime !== atimeMs) {\r\n                this.atime = atimeMs;\r\n                hasChanged = true;\r\n            }\r\n            const mtimeMs = stats.mtime.getTime();\r\n            if (this.mtime !== mtimeMs) {\r\n                this.mtime = mtimeMs;\r\n                hasChanged = true;\r\n            }\r\n            const ctimeMs = stats.ctime.getTime();\r\n            if (this.ctime !== ctimeMs) {\r\n                this.ctime = ctimeMs;\r\n                hasChanged = true;\r\n            }\r\n            return hasChanged;\r\n        }\r\n        // XXX: Copied from Stats. Should reconcile these two into something more\r\n        //      compact.\r\n        /**\r\n         * @return [Boolean] True if this item is a file.\r\n         */\r\n        isFile() {\r\n            return (this.mode & 0xF000) === FileType.FILE;\r\n        }\r\n        /**\r\n         * @return [Boolean] True if this item is a directory.\r\n         */\r\n        isDirectory() {\r\n            return (this.mode & 0xF000) === FileType.DIRECTORY;\r\n        }\r\n    }\r\n\r\n\r\n    return Inode;\r\n});"]}