{"version":3,"sources":["stats.js"],"names":["define","Buffer","FileType","Stats","[object Object]","itemType","size","mode","atimeMs","mtimeMs","ctimeMs","birthtimeMs","this","dev","ino","rdev","nlink","blksize","uid","gid","fileData","currentTime","Date","now","FILE","DIRECTORY","blocks","Math","ceil","buffer","readUInt32LE","atime","readDoubleLE","mtime","ctime","s","birthtime","alloc","writeUInt32LE","writeDoubleLE","getTime","SYMLINK","files"],"mappings":";;;;;;;AAAAA,QACI,8BACA,eACF,SAAUC,EAAOC,GACf,mBASMC,EAYFC,YAAYC,EAAUC,EAAMC,EAAMC,EAASC,EAASC,EAASC,GAOzDC,KAAKC,IAAM,EAEXD,KAAKE,IAAM,EAEXF,KAAKG,KAAO,EAEZH,KAAKI,MAAQ,EAEbJ,KAAKK,QAAU,KAGfL,KAAKM,IAAM,EAEXN,KAAKO,IAAM,EAEXP,KAAKQ,SAAW,KAChBR,KAAKN,KAAOA,EACZ,IAAIe,EAAc,EA2BlB,GA1ByB,iBAAd,IAEPb,EADAa,EAAcC,KAAKC,OAGE,iBAAd,IACFF,IACDA,EAAcC,KAAKC,OAEvBd,EAAUY,GAEW,iBAAd,IACFA,IACDA,EAAcC,KAAKC,OAEvBb,EAAUW,GAEe,iBAAlB,IACFA,IACDA,EAAcC,KAAKC,OAEvBZ,EAAcU,GAElBT,KAAKJ,QAAUA,EACfI,KAAKF,QAAUA,EACfE,KAAKH,QAAUA,EACfG,KAAKD,YAAcA,EACdJ,EAWDK,KAAKL,KAAOA,OAVZ,OAAQF,GACJ,KAAKH,EAASsB,KACVZ,KAAKL,KAAO,IACZ,MACJ,KAAKL,EAASuB,UACd,QACIb,KAAKL,KAAO,IAOxBK,KAAKc,OAASC,KAAKC,KAAKtB,EAAO,KAG3BM,KAAKL,KAAO,OACZK,KAAKL,MAAQF,GAGrBD,kBAAkByB,GACd,MAAMvB,EAAOuB,EAAOC,aAAa,GAAIvB,EAAOsB,EAAOC,aAAa,GAAIC,EAAQF,EAAOG,aAAa,GAAIC,EAAQJ,EAAOG,aAAa,IAAKE,EAAQL,EAAOG,aAAa,IACjK,OAAO,IAAI7B,EAAa,MAAPI,EAAeD,EAAa,KAAPC,EAAcwB,EAAOE,EAAOC,GAKtE9B,aAAa+B,GACT,OAAO,IAAIhC,EAAe,MAATgC,EAAE5B,KAAe4B,EAAE7B,KAAe,KAAT6B,EAAE5B,KAAc4B,EAAE3B,QAAS2B,EAAE1B,QAAS0B,EAAEzB,QAASyB,EAAExB,aAEjGoB,YACI,OAAO,IAAIT,KAAKV,KAAKJ,SAEzByB,YACI,OAAO,IAAIX,KAAKV,KAAKH,SAEzByB,YACI,OAAO,IAAIZ,KAAKV,KAAKF,SAEzB0B,gBACI,OAAO,IAAId,KAAKV,KAAKD,aAEzBP,WACI,MAAMyB,EAAS5B,EAAOoC,MAAM,IAM5B,OALAR,EAAOS,cAAc1B,KAAKN,KAAM,GAChCuB,EAAOS,cAAc1B,KAAKL,KAAM,GAChCsB,EAAOU,cAAc3B,KAAKmB,MAAMS,UAAW,GAC3CX,EAAOU,cAAc3B,KAAKqB,MAAMO,UAAW,IAC3CX,EAAOU,cAAc3B,KAAKsB,MAAMM,UAAW,IACpCX,EAKXzB,SACI,OAAoB,MAAZQ,KAAKL,QAAmBL,EAASsB,KAK7CpB,cACI,OAAoB,MAAZQ,KAAKL,QAAmBL,EAASuB,UAK7CrB,iBACI,OAAoB,MAAZQ,KAAKL,QAAmBL,EAASuC,QAM7CrC,MAAMG,GACFK,KAAKL,KAAoB,MAAZK,KAAKL,KAAiBA,EAGvCH,WACI,OAAO,EAEXA,gBACI,OAAO,EAEXA,oBACI,OAAO,EAEXA,SACI,OAAO,GAKf,OAAOsC,MAAMvC,MAAQA","file":"../stats.js","sourcesContent":["define([\r\n    'skylark-langx-binary/buffer',\r\n    \"./file-type\"\r\n],function (Buffer,FileType) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Emulation of Node's `fs.Stats` object.\r\n     *\r\n     * Attribute descriptions are from `man 2 stat'\r\n     * @see http://nodejs.org/api/fs.html#fs_class_fs_stats\r\n     * @see http://man7.org/linux/man-pages/man2/stat.2.html\r\n     */\r\n    class Stats {\r\n        /**\r\n         * Provides information about a particular entry in the file system.\r\n         * @param itemType Type of the item (FILE, DIRECTORY, SYMLINK, or SOCKET)\r\n         * @param size Size of the item in bytes. For directories/symlinks,\r\n         *   this is normally the size of the struct that represents the item.\r\n         * @param mode Unix-style file mode (e.g. 0o644)\r\n         * @param atimeMs time of last access, in milliseconds since epoch\r\n         * @param mtimeMs time of last modification, in milliseconds since epoch\r\n         * @param ctimeMs time of last time file status was changed, in milliseconds since epoch\r\n         * @param birthtimeMs time of file creation, in milliseconds since epoch\r\n         */\r\n        constructor(itemType, size, mode, atimeMs, mtimeMs, ctimeMs, birthtimeMs) {\r\n            /**\r\n             * UNSUPPORTED ATTRIBUTES\r\n             * I assume no one is going to need these details, although we could fake\r\n             * appropriate values if need be.\r\n             */\r\n            // ID of device containing file\r\n            this.dev = 0;\r\n            // inode number\r\n            this.ino = 0;\r\n            // device ID (if special file)\r\n            this.rdev = 0;\r\n            // number of hard links\r\n            this.nlink = 1;\r\n            // blocksize for file system I/O\r\n            this.blksize = 4096;\r\n            // @todo Maybe support these? atm, it's a one-user filesystem.\r\n            // user ID of owner\r\n            this.uid = 0;\r\n            // group ID of owner\r\n            this.gid = 0;\r\n            // XXX: Some file systems stash data on stats objects.\r\n            this.fileData = null;\r\n            this.size = size;\r\n            let currentTime = 0;\r\n            if (typeof (atimeMs) !== 'number') {\r\n                currentTime = Date.now();\r\n                atimeMs = currentTime;\r\n            }\r\n            if (typeof (mtimeMs) !== 'number') {\r\n                if (!currentTime) {\r\n                    currentTime = Date.now();\r\n                }\r\n                mtimeMs = currentTime;\r\n            }\r\n            if (typeof (ctimeMs) !== 'number') {\r\n                if (!currentTime) {\r\n                    currentTime = Date.now();\r\n                }\r\n                ctimeMs = currentTime;\r\n            }\r\n            if (typeof (birthtimeMs) !== 'number') {\r\n                if (!currentTime) {\r\n                    currentTime = Date.now();\r\n                }\r\n                birthtimeMs = currentTime;\r\n            }\r\n            this.atimeMs = atimeMs;\r\n            this.ctimeMs = ctimeMs;\r\n            this.mtimeMs = mtimeMs;\r\n            this.birthtimeMs = birthtimeMs;\r\n            if (!mode) {\r\n                switch (itemType) {\r\n                    case FileType.FILE:\r\n                        this.mode = 0x1a4;\r\n                        break;\r\n                    case FileType.DIRECTORY:\r\n                    default:\r\n                        this.mode = 0x1ff;\r\n                }\r\n            }\r\n            else {\r\n                this.mode = mode;\r\n            }\r\n            // number of 512B blocks allocated\r\n            this.blocks = Math.ceil(size / 512);\r\n            // Check if mode also includes top-most bits, which indicate the file's\r\n            // type.\r\n            if (this.mode < 0x1000) {\r\n                this.mode |= itemType;\r\n            }\r\n        }\r\n        static fromBuffer(buffer) {\r\n            const size = buffer.readUInt32LE(0), mode = buffer.readUInt32LE(4), atime = buffer.readDoubleLE(8), mtime = buffer.readDoubleLE(16), ctime = buffer.readDoubleLE(24);\r\n            return new Stats(mode & 0xF000, size, mode & 0xFFF, atime, mtime, ctime);\r\n        }\r\n        /**\r\n         * Clones the stats object.\r\n         */\r\n        static clone(s) {\r\n            return new Stats(s.mode & 0xF000, s.size, s.mode & 0xFFF, s.atimeMs, s.mtimeMs, s.ctimeMs, s.birthtimeMs);\r\n        }\r\n        get atime() {\r\n            return new Date(this.atimeMs);\r\n        }\r\n        get mtime() {\r\n            return new Date(this.mtimeMs);\r\n        }\r\n        get ctime() {\r\n            return new Date(this.ctimeMs);\r\n        }\r\n        get birthtime() {\r\n            return new Date(this.birthtimeMs);\r\n        }\r\n        toBuffer() {\r\n            const buffer = Buffer.alloc(32);\r\n            buffer.writeUInt32LE(this.size, 0);\r\n            buffer.writeUInt32LE(this.mode, 4);\r\n            buffer.writeDoubleLE(this.atime.getTime(), 8);\r\n            buffer.writeDoubleLE(this.mtime.getTime(), 16);\r\n            buffer.writeDoubleLE(this.ctime.getTime(), 24);\r\n            return buffer;\r\n        }\r\n        /**\r\n         * @return [Boolean] True if this item is a file.\r\n         */\r\n        isFile() {\r\n            return (this.mode & 0xF000) === FileType.FILE;\r\n        }\r\n        /**\r\n         * @return [Boolean] True if this item is a directory.\r\n         */\r\n        isDirectory() {\r\n            return (this.mode & 0xF000) === FileType.DIRECTORY;\r\n        }\r\n        /**\r\n         * @return [Boolean] True if this item is a symbolic link (only valid through lstat)\r\n         */\r\n        isSymbolicLink() {\r\n            return (this.mode & 0xF000) === FileType.SYMLINK;\r\n        }\r\n        /**\r\n         * Change the mode of the file. We use this helper function to prevent messing\r\n         * up the type of the file, which is encoded in mode.\r\n         */\r\n        chmod(mode) {\r\n            this.mode = (this.mode & 0xF000) | mode;\r\n        }\r\n        // We don't support the following types of files.\r\n        isSocket() {\r\n            return false;\r\n        }\r\n        isBlockDevice() {\r\n            return false;\r\n        }\r\n        isCharacterDevice() {\r\n            return false;\r\n        }\r\n        isFIFO() {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    return files.Stats = Stats;\r\n});"]}