{"version":3,"sources":["providers/simple-sync-rw-transaction.js"],"names":["define","files","ErrorCodes","FileError","FileType","[object Object]","store","this","originalData","modifiedKeys","key","val","get","stashOldValue","data","overwrite","markModified","put","del","value","hasOwnProperty","indexOf","push"],"mappings":";;;;;;;AAAAA,QACI,WACA,iBACA,iBACD,SAAUC,EAAOC,EAAYC,EAAWC,GACvC,aAyEA,aAlEIC,YAAYC,GACRC,KAAKD,MAAQA,EAKbC,KAAKC,gBAILD,KAAKE,gBAETJ,IAAIK,GACA,MAAMC,EAAMJ,KAAKD,MAAMM,IAAIF,GAE3B,OADAH,KAAKM,cAAcH,EAAKC,GACjBA,EAEXN,IAAIK,EAAKI,EAAMC,GAEX,OADAR,KAAKS,aAAaN,GACXH,KAAKD,MAAMW,IAAIP,EAAKI,EAAMC,GAErCV,IAAIK,GACAH,KAAKS,aAAaN,GAClBH,KAAKD,MAAMY,IAAIR,GAEnBL,UACAA,QAEI,IAAK,MAAMK,KAAOH,KAAKE,aAAc,CACjC,MAAMU,EAAQZ,KAAKC,aAAaE,GAC3BS,EAMDZ,KAAKD,MAAMW,IAAIP,EAAKS,GAAO,GAJ3BZ,KAAKD,MAAMY,IAAIR,IAc3BL,cAAcK,EAAKS,GAEVZ,KAAKC,aAAaY,eAAeV,KAClCH,KAAKC,aAAaE,GAAOS,GAOjCd,aAAaK,IAC+B,IAApCH,KAAKE,aAAaY,QAAQX,KAC1BH,KAAKE,aAAaa,KAAKZ,GAClBH,KAAKC,aAAaY,eAAeV,KAClCH,KAAKC,aAAaE,GAAOH,KAAKD,MAAMM,IAAIF","file":"../../providers/simple-sync-rw-transaction.js","sourcesContent":["define([\r\n    \"../files\",\r\n    \"../error-codes\",\r\n    '../file-error'\r\n], function (files, ErrorCodes, FileError, FileType) {\r\n    'use strict';\r\n\r\n\r\n    /**\r\n     * A simple RW transaction for simple synchronous key-value stores.\r\n     */\r\n    class SimpleSyncRWTransaction {\r\n        constructor(store) {\r\n            this.store = store;\r\n            /**\r\n             * Stores data in the keys we modify prior to modifying them.\r\n             * Allows us to roll back commits.\r\n             */\r\n            this.originalData = {};\r\n            /**\r\n             * List of keys modified in this transaction, if any.\r\n             */\r\n            this.modifiedKeys = [];\r\n        }\r\n        get(key) {\r\n            const val = this.store.get(key);\r\n            this.stashOldValue(key, val);\r\n            return val;\r\n        }\r\n        put(key, data, overwrite) {\r\n            this.markModified(key);\r\n            return this.store.put(key, data, overwrite);\r\n        }\r\n        del(key) {\r\n            this.markModified(key);\r\n            this.store.del(key);\r\n        }\r\n        commit() { }\r\n        abort() {\r\n            // Rollback old values.\r\n            for (const key of this.modifiedKeys) {\r\n                const value = this.originalData[key];\r\n                if (!value) {\r\n                    // Key didn't exist.\r\n                    this.store.del(key);\r\n                }\r\n                else {\r\n                    // Key existed. Store old value.\r\n                    this.store.put(key, value, true);\r\n                }\r\n            }\r\n        }\r\n        /**\r\n         * Stashes given key value pair into `originalData` if it doesn't already\r\n         * exist. Allows us to stash values the program is requesting anyway to\r\n         * prevent needless `get` requests if the program modifies the data later\r\n         * on during the transaction.\r\n         */\r\n        stashOldValue(key, value) {\r\n            // Keep only the earliest value in the transaction.\r\n            if (!this.originalData.hasOwnProperty(key)) {\r\n                this.originalData[key] = value;\r\n            }\r\n        }\r\n        /**\r\n         * Marks the given key as modified, and stashes its value if it has not been\r\n         * stashed already.\r\n         */\r\n        markModified(key) {\r\n            if (this.modifiedKeys.indexOf(key) === -1) {\r\n                this.modifiedKeys.push(key);\r\n                if (!this.originalData.hasOwnProperty(key)) {\r\n                    this.originalData[key] = this.store.get(key);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return SimpleSyncRWTransaction;\r\n});"]}