{"version":3,"sources":["providers/worker/worker-provider.js"],"names":["define","Buffer","paths","BaseProvider","Stats","FileType","FileError","ErrorCodes","FileFlag","ActionType","BaseFile","utils","PreloadFile","CallbackArgumentConverter","WorkerFile","buffer2ArrayBuffer","arrayBuffer2Buffer","emptyBuffer","WorkerProvider","[object Object]","worker","super","this","_callbackConverter","_isInitialized","_isReadOnly","_supportLinks","_supportProps","_worker","addEventListener","e","resp","data","isAPIResponse","i","args","fixedArgs","Array","length","_argRemote2Local","toLocalArg","cbId","apply","opts","cb","fs","_initialize","fdConverter","FileDescriptorArgumentConverter","argLocal2Remote","arg","requestArgs","statsLocal2Remote","FileErrorLocal2Remote","toRemoteArg","fileFlagLocal2Remote","bufferLocal2Remote","Error","errorLocal2Remote","argRemote2Local","fixedRequestArgs","specialArg","type","SpecialArgType","CB","id","arguments","message","countdown","err","fixedArg","browserfsMessage","postMessage","API_ERROR","FileErrorRemote2Local","STATS","statsRemote2Local","FILEFLAG","fileFlagRemote2Local","BUFFER","bufferRemote2Local","ERROR","errorRemote2Local","request","isAPIRequest","method","remoteCb","applyFdAPIRequest","response","rootFs","getRootFS","probeResponse","PROBE","isReadOnly","supportsLinks","supportsProps","rootFS","Name","oldPath","newPath","_rpc","p","isLstat","flag","mode","cache","len","fname","encoding","isLchmod","isLchown","uid","gid","atime","mtime","srcpath","dstpath","fd","_argLocal2Remote","misc","FD","fdArg","path","getFileFlag","fromBuffer","transferrableObjectToBuffer","stat","methodName","Options","description","validator","v","EINVAL"],"mappings":"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","file":"../../../providers/worker/worker-provider.js","sourcesContent":["define([\n    \"skylark-langx-binary/buffer\",\n    \"skylark-langx-paths\",\n    \"../base-provider\",\n    '../../stats',\n    '../../file-type',\n    '../../file-error',\n    '../../error-codes',\n    \"../../file-flag\",\n    \"../../action-type\",\n    \"../../base-file\",\n    \"../../utils\",\n    \"../preload-file\",\n    \"./callback-argument-converter\",\n    \"./worker-file\"\n], function (\n    Buffer,\n    paths, \n    BaseProvider, \n    Stats,\n    FileType,\n    FileError, \n    ErrorCodes, \n    FileFlag,\n    ActionType,\n    BaseFile,\n    utils,\n    PreloadFile,\n    CallbackArgumentConverter,\n    WorkerFile\n) {\n\n\n    const { buffer2ArrayBuffer, arrayBuffer2Buffer, emptyBuffer }  = utils;\n\n\n\n    /**\n     * WorkerProvider lets you access a BrowserFS instance that is running in a different\n     * JavaScript context (e.g. access BrowserFS in one of your WebWorkers, or\n     * access BrowserFS running on the main page from a WebWorker).\n     *\n     * For example, to have a WebWorker access files in the main browser thread,\n     * do the following:\n     *\n     * MAIN BROWSER THREAD:\n     *\n     * ```javascript\n     *   // Listen for remote file system requests.\n     *   BrowserFS.Provider.WorkerProvider.attachRemoteListener(webWorkerObject);\n     * ```\n     *\n     * WEBWORKER THREAD:\n     *\n     * ```javascript\n     *   // Set the remote file system as the root file system.\n     *   BrowserFS.configure({ fs: \"WorkerProvider\", options: { worker: self }}, function(e) {\n     *     // Ready!\n     *   });\n     * ```\n     *\n     * Note that synchronous operations are not permitted on the WorkerProvider, regardless\n     * of the configuration option of the remote FS.\n     */\n    class WorkerProvider extends BaseProvider {\n        /**\n         * Constructs a new WorkerProvider instance that connects with BrowserFS running on\n         * the specified worker.\n         */\n        constructor(worker) {\n            super();\n            this._callbackConverter = new CallbackArgumentConverter();\n            this._isInitialized = false;\n            this._isReadOnly = false;\n            this._supportLinks = false;\n            this._supportProps = false;\n            this._worker = worker;\n            this._worker.addEventListener('message', (e) => {\n                const resp = e.data;\n                if (isAPIResponse(resp)) {\n                    let i;\n                    const args = resp.args;\n                    const fixedArgs = new Array(args.length);\n                    // Dispatch event to correct id.\n                    for (i = 0; i < fixedArgs.length; i++) {\n                        fixedArgs[i] = this._argRemote2Local(args[i]);\n                    }\n                    this._callbackConverter.toLocalArg(resp.cbId).apply(null, fixedArgs);\n                }\n            });\n        }\n        static Create(opts, cb) {\n            const fs = new WorkerProvider(opts.worker);\n            fs._initialize(() => {\n                cb(null, fs);\n            });\n        }\n        static isAvailable() {\n            return typeof (importScripts) !== 'undefined' || typeof (Worker) !== 'undefined';\n        }\n        /**\n         * Attaches a listener to the remote worker for file system requests.\n         */\n        static attachRemoteListener(worker) {\n            const fdConverter = new FileDescriptorArgumentConverter();\n            function argLocal2Remote(arg, requestArgs, cb) {\n                switch (typeof arg) {\n                    case 'object':\n                        if (arg instanceof Stats) {\n                            cb(null, statsLocal2Remote(arg));\n                        }\n                        else if (arg instanceof FileError) {\n                            cb(null, FileErrorLocal2Remote(arg));\n                        }\n                        else if (arg instanceof BaseFile) {\n                            // Pass in p and flags from original request.\n                            cb(null, fdConverter.toRemoteArg(arg, requestArgs[0], requestArgs[1], cb));\n                        }\n                        else if (arg instanceof FileFlag) {\n                            cb(null, fileFlagLocal2Remote(arg));\n                        }\n                        else if (arg instanceof Buffer) {\n                            cb(null, bufferLocal2Remote(arg));\n                        }\n                        else if (arg instanceof Error) {\n                            cb(null, errorLocal2Remote(arg));\n                        }\n                        else {\n                            cb(null, arg);\n                        }\n                        break;\n                    default:\n                        cb(null, arg);\n                        break;\n                }\n            }\n            function argRemote2Local(arg, fixedRequestArgs) {\n                if (!arg) {\n                    return arg;\n                }\n                switch (typeof arg) {\n                    case 'object':\n                        if (typeof arg['type'] === 'number') {\n                            const specialArg = arg;\n                            switch (specialArg.type) {\n                                case SpecialArgType.CB:\n                                    const cbId = arg.id;\n                                    return function () {\n                                        let i;\n                                        const fixedArgs = new Array(arguments.length);\n                                        let message, countdown = arguments.length;\n                                        function abortAndSendError(err) {\n                                            if (countdown > 0) {\n                                                countdown = -1;\n                                                message = {\n                                                    browserfsMessage: true,\n                                                    cbId: cbId,\n                                                    args: [FileErrorLocal2Remote(err)]\n                                                };\n                                                worker.postMessage(message);\n                                            }\n                                        }\n                                        for (i = 0; i < arguments.length; i++) {\n                                            // Capture i and argument.\n                                            ((i, arg) => {\n                                                argLocal2Remote(arg, fixedRequestArgs, (err, fixedArg) => {\n                                                    fixedArgs[i] = fixedArg;\n                                                    if (err) {\n                                                        abortAndSendError(err);\n                                                    }\n                                                    else if (--countdown === 0) {\n                                                        message = {\n                                                            browserfsMessage: true,\n                                                            cbId: cbId,\n                                                            args: fixedArgs\n                                                        };\n                                                        worker.postMessage(message);\n                                                    }\n                                                });\n                                            })(i, arguments[i]);\n                                        }\n                                        if (arguments.length === 0) {\n                                            message = {\n                                                browserfsMessage: true,\n                                                cbId: cbId,\n                                                args: fixedArgs\n                                            };\n                                            worker.postMessage(message);\n                                        }\n                                    };\n                                case SpecialArgType.API_ERROR:\n                                    return FileErrorRemote2Local(specialArg);\n                                case SpecialArgType.STATS:\n                                    return statsRemote2Local(specialArg);\n                                case SpecialArgType.FILEFLAG:\n                                    return fileFlagRemote2Local(specialArg);\n                                case SpecialArgType.BUFFER:\n                                    return bufferRemote2Local(specialArg);\n                                case SpecialArgType.ERROR:\n                                    return errorRemote2Local(specialArg);\n                                default:\n                                    // No idea what this is.\n                                    return arg;\n                            }\n                        }\n                        else {\n                            return arg;\n                        }\n                    default:\n                        return arg;\n                }\n            }\n            worker.addEventListener('message', (e) => {\n                const request = e.data;\n                if (isAPIRequest(request)) {\n                    const args = request.args, fixedArgs = new Array(args.length);\n                    switch (request.method) {\n                        case 'close':\n                        case 'sync':\n                            (() => {\n                                // File descriptor-relative methods.\n                                const remoteCb = args[1];\n                                fdConverter.applyFdAPIRequest(request, (err) => {\n                                    // Send response.\n                                    const response = {\n                                        browserfsMessage: true,\n                                        cbId: remoteCb.id,\n                                        args: err ? [FileErrorLocal2Remote(err)] : []\n                                    };\n                                    worker.postMessage(response);\n                                });\n                            })();\n                            break;\n                        case 'probe':\n                            (() => {\n                                const rootFs = fs.getRootFS(), remoteCb = args[1], probeResponse = {\n                                    type: SpecialArgType.PROBE,\n                                    isReadOnly: rootFs.isReadOnly(),\n                                    supportsLinks: rootFs.supportsLinks(),\n                                    supportsProps: rootFs.supportsProps()\n                                }, response = {\n                                    browserfsMessage: true,\n                                    cbId: remoteCb.id,\n                                    args: [probeResponse]\n                                };\n                                worker.postMessage(response);\n                            })();\n                            break;\n                        default:\n                            // File system methods.\n                            for (let i = 0; i < args.length; i++) {\n                                fixedArgs[i] = argRemote2Local(args[i], fixedArgs);\n                            }\n                            const rootFS = fs.getRootFS();\n                            rootFS[request.method].apply(rootFS, fixedArgs);\n                            break;\n                    }\n                }\n            });\n        }\n        getName() {\n            return WorkerProvider.Name;\n        }\n        isReadOnly() { return this._isReadOnly; }\n        supportsSynch() { return false; }\n        supportsLinks() { return this._supportLinks; }\n        supportsProps() { return this._supportProps; }\n        rename(oldPath, newPath, cb) {\n            this._rpc('rename', arguments);\n        }\n        stat(p, isLstat, cb) {\n            this._rpc('stat', arguments);\n        }\n        open(p, flag, mode, cb) {\n            this._rpc('open', arguments);\n        }\n        unlink(p, cb) {\n            this._rpc('unlink', arguments);\n        }\n        rmdir(p, cb) {\n            this._rpc('rmdir', arguments);\n        }\n        mkdir(p, mode, cb) {\n            this._rpc('mkdir', arguments);\n        }\n        readdir(p, cb) {\n            this._rpc('readdir', arguments);\n        }\n        exists(p, cb) {\n            this._rpc('exists', arguments);\n        }\n        realpath(p, cache, cb) {\n            this._rpc('realpath', arguments);\n        }\n        truncate(p, len, cb) {\n            this._rpc('truncate', arguments);\n        }\n        readFile(fname, encoding, flag, cb) {\n            this._rpc('readFile', arguments);\n        }\n        writeFile(fname, data, encoding, flag, mode, cb) {\n            this._rpc('writeFile', arguments);\n        }\n        appendFile(fname, data, encoding, flag, mode, cb) {\n            this._rpc('appendFile', arguments);\n        }\n        chmod(p, isLchmod, mode, cb) {\n            this._rpc('chmod', arguments);\n        }\n        chown(p, isLchown, uid, gid, cb) {\n            this._rpc('chown', arguments);\n        }\n        utimes(p, atime, mtime, cb) {\n            this._rpc('utimes', arguments);\n        }\n        link(srcpath, dstpath, cb) {\n            this._rpc('link', arguments);\n        }\n        symlink(srcpath, dstpath, type, cb) {\n            this._rpc('symlink', arguments);\n        }\n        readlink(p, cb) {\n            this._rpc('readlink', arguments);\n        }\n        syncClose(method, fd, cb) {\n            this._worker.postMessage({\n                browserfsMessage: true,\n                method: method,\n                args: [fd.toRemoteArg(), this._callbackConverter.toRemoteArg(cb)]\n            });\n        }\n        /**\n         * Called once both local and remote sides are set up.\n         */\n        _initialize(cb) {\n            if (!this._isInitialized) {\n                const message = {\n                    browserfsMessage: true,\n                    method: 'probe',\n                    args: [this._argLocal2Remote(emptyBuffer()), this._callbackConverter.toRemoteArg((probeResponse) => {\n                            this._isInitialized = true;\n                            this._isReadOnly = probeResponse.isReadOnly;\n                            this._supportLinks = probeResponse.supportsLinks;\n                            this._supportProps = probeResponse.supportsProps;\n                            cb();\n                        })]\n                };\n                this._worker.postMessage(message);\n            }\n            else {\n                cb();\n            }\n        }\n        _argRemote2Local(arg) {\n            if (!arg) {\n                return arg;\n            }\n            switch (typeof arg) {\n                case 'object':\n                    if (typeof arg['type'] === 'number') {\n                        const specialArg = arg;\n                        switch (specialArg.type) {\n                            case SpecialArgType.API_ERROR:\n                                return misc.FileErrorRemote2Local(specialArg);\n                            case SpecialArgType.FD:\n                                const fdArg = specialArg;\n                                return new WorkerFile(this, fdArg.path, FileFlag.getFileFlag(fdArg.flag), Stats.fromBuffer(transferrableObjectToBuffer(fdArg.stat)), fdArg.id, transferrableObjectToBuffer(fdArg.data));\n                            case SpecialArgType.STATS:\n                                return misc.statsRemote2Local(specialArg);\n                            case SpecialArgType.FILEFLAG:\n                                return misc.fileFlagRemote2Local(specialArg);\n                            case SpecialArgType.BUFFER:\n                                return misc.bufferRemote2Local(specialArg);\n                            case SpecialArgType.ERROR:\n                                return misc.errorRemote2Local(specialArg);\n                            default:\n                                return arg;\n                        }\n                    }\n                    else {\n                        return arg;\n                    }\n                default:\n                    return arg;\n            }\n        }\n        _rpc(methodName, args) {\n            const fixedArgs = new Array(args.length);\n            for (let i = 0; i < args.length; i++) {\n                fixedArgs[i] = this._argLocal2Remote(args[i]);\n            }\n            const message = {\n                browserfsMessage: true,\n                method: methodName,\n                args: fixedArgs\n            };\n            this._worker.postMessage(message);\n        }\n        /**\n         * Converts a local argument into a remote argument. Public so WorkerFile objects can call it.\n         */\n        _argLocal2Remote(arg) {\n            if (!arg) {\n                return arg;\n            }\n            switch (typeof arg) {\n                case \"object\":\n                    if (arg instanceof Stats) {\n                        return statsLocal2Remote(arg);\n                    }\n                    else if (arg instanceof FileError) {\n                        return FileErrorLocal2Remote(arg);\n                    }\n                    else if (arg instanceof WorkerFile) {\n                        return arg.toRemoteArg();\n                    }\n                    else if (arg instanceof FileFlag) {\n                        return fileFlagLocal2Remote(arg);\n                    }\n                    else if (arg instanceof Buffer) {\n                        return bufferLocal2Remote(arg);\n                    }\n                    else if (arg instanceof Error) {\n                        return errorLocal2Remote(arg);\n                    }\n                    else {\n                        return \"Unknown argument\";\n                    }\n                case \"function\":\n                    return this._callbackConverter.toRemoteArg(arg);\n                default:\n                    return arg;\n            }\n        }\n    }\n    WorkerProvider.Name = \"WorkerProvider\";\n    WorkerProvider.Options = {\n        worker: {\n            type: \"object\",\n            description: \"The target worker that you want to connect to, or the current worker if in a worker context.\",\n            validator: function (v, cb) {\n                // Check for a `postMessage` function.\n                if (v['postMessage']) {\n                    cb();\n                }\n                else {\n                    cb(new FileError(ErrorCodes.EINVAL, `option must be a Web Worker instance.`));\n                }\n            }\n        }\n    };\n\n    return WorkerProvider;\n});"]}