{"version":3,"sources":["providers/async-key-value-provider.js"],"names":["define","GenerateRandomID","Buffer","paths","LRUCache","files","ErrorCodes","FileError","FileType","utils","Inode","BaseProvider","AsyncKeyValueFile","emptyBuffer","ROOT_NODE_ID","emptyDirNode","noError","e","cb","noErrorTx","tx","abort","providers","AsyncKeyValueProvider","[object Object]","cacheSize","super","this","_cache","store","makeRootDirectory","name","removeAll","clear","oldPath","newPath","c","oldCb","beginTransaction","oldParent","dirname","oldName","basename","newParent","newName","inodes","lists","errorOccurred","indexOf","EBUSY","theOleSwitcharoo","hasOwnProperty","oldParentList","oldParentINode","newParentList","newParentINode","fileId","completeRename","put","id","from","JSON","stringify","commit","getINode","inode","isFile","del","EPERM","ENOENT","processInodeAndListings","p","findINodeAndDirListing","node","dirList","isLstat","findINode","toStats","flag","mode","data","commitNewFile","FILE","newFile","get","undefined","removeEntry","readdir","err","length","ENOTEMPTY","DIRECTORY","getDirListing","dirListing","Object","keys","stats","_findINode","fileInodeId","fileInode","inodeChanged","update","toBuffer","currTime","Date","getTime","dirInode","parent","filename","join","handleDirectoryListings","set","resolve","fromBuffer","isDirectory","parse","toString","ENOTDIR","listing","currId","retries","reroll","EIO","committed","type","parentDir","fname","EEXIST","parentNode","addNewNode","dataId","isDir","remove","fileName","parentListing","fileNodeId","fileNode","EISDIR"],"mappings":";;;;;;;AAAAA,QACI,sCACA,8BACA,sBACA,qCACA,WACA,iBACA,gBACA,eACA,WACA,kBACA,kBACA,0BACA,SAAUC,EAAiBC,EAAOC,EAAMC,EAAUC,EAAOC,EAAYC,EAAWC,EAAUC,EAAOC,EAAMC,EAAaC,GACpH,aAEA,MAAMC,YAAEA,GAAgBJ,EAKlBK,EAAe,IAKrB,IAAIC,EAAe,KAkBnB,SAASC,EAAQC,EAAGC,GAChB,OAAID,IACAC,EAAGD,IACI,GASf,SAASE,EAAUF,EAAGG,EAAIF,GACtB,OAAID,IACAG,EAAGC,MAAM,KACLH,EAAGD,MAEA,GAilBf,OAAQZ,EAAMiB,UAAUC,oCAvkBYZ,EAChCa,YAAYC,GACRC,QACAC,KAAKC,OAAS,KACVH,EAAY,IACZE,KAAKC,OAAS,IAAIxB,EAASqB,IAInCD,qBAAuB,OAAO,EAK9BA,KAAKK,EAAOX,GACRS,KAAKE,MAAQA,EAEbF,KAAKG,kBAAkBZ,GAG3BM,UAAY,OAAOG,KAAKE,MAAME,OAE9BP,aAAe,OAAO,EAEtBA,mBAAqB,OAAO,EAE5BA,gBAAkB,OAAO,EAEzBA,gBAAkB,OAAO,EAKzBA,MAAMN,GACES,KAAKC,QACLD,KAAKC,OAAOI,YAEhBL,KAAKE,MAAMI,MAAOhB,IACVD,EAAQC,EAAGC,IAEXS,KAAKG,kBAAkBZ,KAKnCM,OAAOU,EAASC,EAASjB,GAErB,GAAIS,KAAKC,OAAQ,CAEb,MAAMQ,EAAIT,KAAKC,OACfD,KAAKC,OAAS,KACdQ,EAAEJ,YACF,MAAMK,EAAQnB,EACdA,EAAK,CAACD,IAEFU,KAAKC,OAASQ,EACdC,EAAMpB,KAGd,MAAMG,EAAKO,KAAKE,MAAMS,iBAAiB,aACjCC,EAAYpC,EAAMqC,QAAQN,GAAUO,EAAUtC,EAAMuC,SAASR,GAC7DS,EAAYxC,EAAMqC,QAAQL,GAAUS,EAAUzC,EAAMuC,SAASP,GAC7DU,KACAC,KACN,IAAIC,GAAgB,EAKpB,GAAiD,KAA5CJ,EAAY,KAAKK,QAAQd,EAAU,KACpC,OAAOhB,EAAG,IAAIX,EAAUD,EAAW2C,MAAOV,IAO9C,MAAMW,EAAmB,KAErB,GAAIH,IAAkBD,EAAMK,eAAeZ,KAAeO,EAAMK,eAAeR,GAC3E,OAEJ,MAAMS,EAAgBN,EAAMP,GAAYc,EAAiBR,EAAON,GAAYe,EAAgBR,EAAMH,GAAYY,EAAiBV,EAAOF,GAEtI,GAAKS,EAAcX,GAGd,CACD,MAAMe,EAASJ,EAAcX,UACtBW,EAAcX,GAGrB,MAAMgB,EAAiB,KACnBH,EAAcV,GAAWY,EAEzBpC,EAAGsC,IAAIL,EAAeM,GAAIzD,EAAO0D,KAAKC,KAAKC,UAAUV,KAAiB,EAAOnC,IACrEE,EAAUF,EAAGG,EAAIF,KACbqB,IAAcI,EAEdvB,EAAG2C,OAAO7C,GAIVE,EAAGsC,IAAIH,EAAeI,GAAIzD,EAAO0D,KAAKC,KAAKC,UAAUR,KAAiB,EAAOrC,IACrEE,EAAUF,EAAGG,EAAIF,IACjBE,EAAG2C,OAAO7C,SAO9BoC,EAAcV,GAGdjB,KAAKqC,SAAS5C,EAAIe,EAASmB,EAAcV,GAAU,CAAC3B,EAAGgD,KAC/C9C,EAAUF,EAAGG,EAAIF,KACb+C,EAAMC,SAEN9C,EAAG+C,IAAIF,EAAMN,GAAK1C,IACVE,EAAUF,EAAGG,EAAIF,IACjBE,EAAG+C,IAAIb,EAAcV,GAAW3B,IACxBE,EAAUF,EAAGG,EAAIF,IACjBuC,QAQhBrC,EAAGC,MAAOJ,IACNC,EAAGX,EAAU6D,MAAMjC,SAOnCsB,SAtDJvC,EAAGX,EAAU8D,OAAOnC,KA8DtBoC,EAA2BC,IAC7B5C,KAAK6C,uBAAuBpD,EAAImD,EAAG,CAACtD,EAAGwD,EAAMC,KACrCzD,EACK8B,IACDA,GAAgB,EAChB3B,EAAGC,MAAM,KACLH,EAAGD,OAMX4B,EAAO0B,GAAKE,EACZ3B,EAAMyB,GAAKG,EACXxB,QAIZoB,EAAwB/B,GACpBA,IAAcI,GACd2B,EAAwB3B,GAGhCnB,KAAK+C,EAAGI,EAASzD,GACb,MAAME,EAAKO,KAAKE,MAAMS,iBAAiB,YACvCX,KAAKiD,UAAUxD,EAAImD,EAAG,CAACtD,EAAGgD,KAClBjD,EAAQC,EAAGC,IACXA,EAAG,KAAM+C,EAAMY,aAI3BrD,WAAW+C,EAAGO,EAAMC,EAAM7D,GACtB,MAAME,EAAKO,KAAKE,MAAMS,iBAAiB,aAAc0C,EAAOnE,IAC5Dc,KAAKsD,cAAc7D,EAAImD,EAAG/D,EAAS0E,KAAMH,EAAMC,EAAM,CAAC/D,EAAGkE,KACjDnE,EAAQC,EAAGC,IACXA,EAAG,KAAM,IAAIN,EAAkBe,KAAM4C,EAAGO,EAAMK,EAAQN,UAAWG,MAK7ExD,SAAS+C,EAAGO,EAAM5D,GACd,MAAME,EAAKO,KAAKE,MAAMS,iBAAiB,YAEvCX,KAAKiD,UAAUxD,EAAImD,EAAG,CAACtD,EAAGgD,KAClBjD,EAAQC,EAAGC,IAEXE,EAAGgE,IAAInB,EAAMN,GAAI,CAAC1C,EAAG+D,KACbhE,EAAQC,EAAGC,UACEmE,IAATL,EACA9D,EAAGX,EAAU8D,OAAOE,IAGpBrD,EAAG,KAAM,IAAIN,EAAkBe,KAAM4C,EAAGO,EAAMb,EAAMY,UAAWG,SAQvFxD,OAAO+C,EAAGrD,GACNS,KAAK2D,YAAYf,GAAG,EAAOrD,GAG/BM,MAAM+C,EAAGrD,GAELS,KAAK4D,QAAQhB,EAAG,CAACiB,EAAKnF,KACdmF,EACAtE,EAAGsE,GAEEnF,EAAMoF,OAAS,EACpBvE,EAAGX,EAAUmF,UAAUnB,IAGvB5C,KAAK2D,YAAYf,GAAG,EAAMrD,KAKtCM,MAAM+C,EAAGQ,EAAM7D,GACX,MAAME,EAAKO,KAAKE,MAAMS,iBAAiB,aAAc0C,EAAO9E,EAAO0D,KAAK,MACxEjC,KAAKsD,cAAc7D,EAAImD,EAAG/D,EAASmF,UAAWZ,EAAMC,EAAM9D,GAG9DM,QAAQ+C,EAAGrD,GACP,MAAME,EAAKO,KAAKE,MAAMS,iBAAiB,YACvCX,KAAKiD,UAAUxD,EAAImD,EAAG,CAACtD,EAAGgD,KAClBjD,EAAQC,EAAGC,IACXS,KAAKiE,cAAcxE,EAAImD,EAAGN,EAAO,CAAChD,EAAG4E,KAC7B7E,EAAQC,EAAGC,IACXA,EAAG,KAAM4E,OAAOC,KAAKF,QAOzCrE,MAAM+C,EAAGS,EAAMgB,EAAO9E,GAGlB,MAAME,EAAKO,KAAKE,MAAMS,iBAAiB,aAEvCX,KAAKsE,WAAW7E,EAAIjB,EAAMqC,QAAQ+B,GAAIpE,EAAMuC,SAAS6B,GAAI,CAACtD,EAAGiF,KACrD/E,EAAUF,EAAGG,EAAIF,IAEjBS,KAAKqC,SAAS5C,EAAImD,EAAG2B,EAAa,CAACjF,EAAGkF,KAClC,GAAIhF,EAAUF,EAAGG,EAAIF,GAAK,CACtB,MAAMkF,EAAeD,EAAUE,OAAOL,GAEtC5E,EAAGsC,IAAIyC,EAAUxC,GAAIqB,GAAM,EAAO/D,IAC1BE,EAAUF,EAAGG,EAAIF,KAEbkF,EACAhF,EAAGsC,IAAIwC,EAAaC,EAAUG,YAAY,EAAOrF,IACzCE,EAAUF,EAAGG,EAAIF,IACjBE,EAAG2C,OAAO7C,KAMlBE,EAAG2C,OAAO7C,WAY1CM,kBAAkBN,GACd,MAAME,EAAKO,KAAKE,MAAMS,iBAAiB,aACvClB,EAAGgE,IAAItE,EAAc,CAACG,EAAG+D,KACrB,GAAI/D,QAAcoE,IAATL,EAAoB,CAEzB,MAAMuB,GAAW,IAAKC,MAAQC,UAE9BC,EAAW,IAAIhG,EAAMT,IAAoB,KAAM,IAAMO,EAASmF,UAAWY,EAAUA,EAAUA,GAG7FnF,EAAGsC,IAAIgD,EAAS/C,GAxUxB5C,IAGGA,EAAeb,EAAO0D,KAAK,QAqUiB,EAAQ3C,IACvCE,EAAUF,EAAGG,EAAIF,IACjBE,EAAGsC,IAAI5C,EAAc4F,EAASJ,YAAY,EAAQrF,IAC1CA,EACAG,EAAGC,MAAM,KAAQH,EAAGD,KAGpBG,EAAG2C,OAAO7C,YAQ1BE,EAAG2C,OAAO7C,KAWtBM,WAAWJ,EAAIuF,EAAQC,EAAU1F,GAC7B,GAAIS,KAAKC,OAAQ,CACb,MAAM+B,EAAKhC,KAAKC,OAAOwD,IAAIjF,EAAM0G,KAAKF,EAAQC,IAC9C,GAAIjD,EACA,OAAOzC,EAAG,KAAMyC,GAGxB,MAAMmD,EAA0B,CAAC7F,EAAGgD,EAAOS,KACvC,GAAIzD,EACAC,EAAGD,QAEF,GAAIyD,EAAQkC,GAAW,CACxB,MAAMjD,EAAKe,EAAQkC,GACfjF,KAAKC,QACLD,KAAKC,OAAOmF,IAAI5G,EAAM0G,KAAKF,EAAQC,GAAWjD,GAElDzC,EAAG,KAAMyC,QAGTzC,EAAGX,EAAU8D,OAAOlE,EAAM6G,QAAQL,EAAQC,MAGnC,MAAXD,EACiB,KAAbC,GAEIjF,KAAKC,QACLD,KAAKC,OAAOmF,IAAI5G,EAAM0G,KAAKF,EAAQC,GAAW9F,GAElDI,EAAG,KAAMJ,IAITa,KAAKqC,SAAS5C,EAAIuF,EAAQ7F,EAAc,CAACG,EAAGgD,KACpCjD,EAAQC,EAAGC,IACXS,KAAKiE,cAAcxE,EAAIuF,EAAQ1C,EAAO,CAAChD,EAAGyD,KAEtCoC,EAAwB7F,EAAGgD,EAAOS,OASlD/C,KAAK6C,uBAAuBpD,EAAIuF,EAAQG,GAShDtF,UAAUJ,EAAImD,EAAGrD,GACbS,KAAKsE,WAAW7E,EAAIjB,EAAMqC,QAAQ+B,GAAIpE,EAAMuC,SAAS6B,GAAI,CAACtD,EAAG0C,KACrD3C,EAAQC,EAAGC,IACXS,KAAKqC,SAAS5C,EAAImD,EAAGZ,EAAIzC,KAWrCM,SAASJ,EAAImD,EAAGZ,EAAIzC,GAChBE,EAAGgE,IAAIzB,EAAI,CAAC1C,EAAG+D,KACPhE,EAAQC,EAAGC,UACEmE,IAATL,EACA9D,EAAGX,EAAU8D,OAAOE,IAGpBrD,EAAG,KAAMR,EAAMuG,WAAWjC,OAS1CxD,cAAcJ,EAAImD,EAAGN,EAAO/C,GACnB+C,EAAMiD,cAIP9F,EAAGgE,IAAInB,EAAMN,GAAI,CAAC1C,EAAG+D,KACjB,GAAIhE,EAAQC,EAAGC,GACX,IACIA,EAAG,KAAM2C,KAAKsD,MAAMnC,EAAKoC,aAE7B,MAAOnG,GAIHC,EAAGX,EAAU8D,OAAOE,OAZhCrD,EAAGX,EAAU8G,QAAQ9C,IAsB7B/C,uBAAuBJ,EAAImD,EAAGrD,GAC1BS,KAAKiD,UAAUxD,EAAImD,EAAG,CAACtD,EAAGgD,KAClBjD,EAAQC,EAAGC,IACXS,KAAKiE,cAAcxE,EAAImD,EAAGN,EAAO,CAAChD,EAAGqG,KAC7BtG,EAAQC,EAAGC,IACXA,EAAG,KAAM+C,EAAOqD,OAWpC9F,WAAWJ,EAAI4D,EAAM9D,GACjB,IAAiBqG,EAAbC,EAAU,EACd,MAAMC,EAAS,KACO,KAAZD,EAEFtG,EAAG,IAAIX,EAAUD,EAAWoH,IAAK,+CAIjCH,EAAStH,IACTmB,EAAGsC,IAAI6D,EAAQvC,GAAM,EAAO,CAAC/D,EAAG0G,KACxB1G,IAAM0G,EACNF,IAIAvG,EAAG,KAAMqG,OAKzBE,IAYJjG,cAAcJ,EAAImD,EAAGqD,EAAM7C,EAAMC,EAAM9D,GACnC,MAAM2G,EAAY1H,EAAMqC,QAAQ+B,GAAIuD,EAAQ3H,EAAMuC,SAAS6B,GAAIgC,GAAW,IAAKC,MAAQC,UAIvF,GAAU,MAANlC,EACA,OAAOrD,EAAGX,EAAUwH,OAAOxD,IAI/B5C,KAAK6C,uBAAuBpD,EAAIyG,EAAW,CAAC5G,EAAG+G,EAAYnC,KACnD1E,EAAUF,EAAGG,EAAIF,KACb2E,EAAWiC,GAEX1G,EAAGC,MAAM,KACLH,EAAGX,EAAUwH,OAAOxD,MAKxB5C,KAAKsG,WAAW7G,EAAI4D,EAAM,CAAC/D,EAAGiH,KAC1B,GAAI/G,EAAUF,EAAGG,EAAIF,GAAK,CAEtB,MAAMiF,EAAY,IAAIzF,EAAMwH,EAAQlD,EAAKS,OAAQV,EAAO6C,EAAMrB,EAAUA,EAAUA,GAClF5E,KAAKsG,WAAW7G,EAAI+E,EAAUG,WAAY,CAACrF,EAAGiF,KACtC/E,EAAUF,EAAGG,EAAIF,KAEjB2E,EAAWiC,GAAS5B,EACpB9E,EAAGsC,IAAIsE,EAAWrE,GAAIzD,EAAO0D,KAAKC,KAAKC,UAAU+B,KAAc,EAAO5E,IAC9DE,EAAUF,EAAGG,EAAIF,IAEjBE,EAAG2C,OAAQ9C,IACHE,EAAUF,EAAGG,EAAIF,IACjBA,EAAG,KAAMiF,gBAmBzD3E,YAAY+C,EAAG4D,EAAOjH,GAEdS,KAAKC,QACLD,KAAKC,OAAOwG,OAAO7D,GAEvB,MAAMnD,EAAKO,KAAKE,MAAMS,iBAAiB,aAAcqE,EAASxG,EAAMqC,QAAQ+B,GAAI8D,EAAWlI,EAAMuC,SAAS6B,GAE1G5C,KAAK6C,uBAAuBpD,EAAIuF,EAAQ,CAAC1F,EAAG+G,EAAYM,KACpD,GAAInH,EAAUF,EAAGG,EAAIF,GACjB,GAAKoH,EAAcD,GAKd,CAED,MAAME,EAAaD,EAAcD,UAC1BC,EAAcD,GAErB1G,KAAKqC,SAAS5C,EAAImD,EAAGgE,EAAY,CAACtH,EAAGuH,KAC7BrH,EAAUF,EAAGG,EAAIF,MACZiH,GAASK,EAAStB,cACnB9F,EAAGC,MAAM,KACLH,EAAGX,EAAUkI,OAAOlE,MAGnB4D,IAAUK,EAAStB,cACxB9F,EAAGC,MAAM,KACLH,EAAGX,EAAU8G,QAAQ9C,MAKzBnD,EAAG+C,IAAIqE,EAAS7E,GAAK1C,IACbE,EAAUF,EAAGG,EAAIF,IAEjBE,EAAG+C,IAAIoE,EAAatH,IACZE,EAAUF,EAAGG,EAAIF,IAEjBE,EAAGsC,IAAIsE,EAAWrE,GAAIzD,EAAO0D,KAAKC,KAAKC,UAAUwE,KAAiB,EAAOrH,IACjEE,EAAUF,EAAGG,EAAIF,IACjBE,EAAG2C,OAAO7C,iBA/B9CE,EAAGC,MAAM,KACLH,EAAGX,EAAU8D,OAAOE","file":"../../providers/async-key-value-provider.js","sourcesContent":["define([\r\n    \"skylark-langx-strings/generate-uuid\",\r\n    \"skylark-langx-binary/buffer\",\r\n    \"skylark-langx-paths\",\r\n    \"skylark-data-collections/lru-cache\",\r\n    \"../files\",\r\n    \"../error-codes\",\r\n    '../file-error',\r\n    \"../file-type\",\r\n    '../utils',\r\n    \"../inodes/inode\",\r\n    \"./base-provider\",\r\n    \"./async-key-value-file\"\r\n ], function (GenerateRandomID,Buffer,paths,LRUCache, files, ErrorCodes, FileError, FileType, utils, Inode,BaseProvider,AsyncKeyValueFile) {\r\n    'use strict';\r\n\r\n    const { emptyBuffer } = utils;\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    const ROOT_NODE_ID = \"/\";\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    let emptyDirNode = null;\r\n\r\n    /**\r\n     * Returns an empty directory node.\r\n     * @hidden\r\n     */\r\n    function getEmptyDirNode() {\r\n        if (emptyDirNode) {\r\n            return emptyDirNode;\r\n        }\r\n        return emptyDirNode = Buffer.from(\"{}\");\r\n    }\r\n\r\n    /**\r\n     * Helper function. Checks if 'e' is defined. If so, it triggers the callback\r\n     * with 'e' and returns false. Otherwise, returns true.\r\n     * @hidden\r\n     */\r\n    function noError(e, cb) {\r\n        if (e) {\r\n            cb(e);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Helper function. Checks if 'e' is defined. If so, it aborts the transaction,\r\n     * triggers the callback with 'e', and returns false. Otherwise, returns true.\r\n     * @hidden\r\n     */\r\n    function noErrorTx(e, tx, cb) {\r\n        if (e) {\r\n            tx.abort(() => {\r\n                cb(e);\r\n            });\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * An \"Asynchronous key-value file system\". Stores data to/retrieves data from\r\n     * an underlying asynchronous key-value store.\r\n     */\r\n    class AsyncKeyValueProvider extends BaseProvider {\r\n        constructor(cacheSize) {\r\n            super();\r\n            this._cache = null;\r\n            if (cacheSize > 0) {\r\n                this._cache = new LRUCache(cacheSize);\r\n            }\r\n        }\r\n\r\n        static isAvailable() { return true; }\r\n        /**\r\n         * Initializes the file system. Typically called by subclasses' async\r\n         * constructors.\r\n         */\r\n        init(store, cb) {\r\n            this.store = store;\r\n            // INVARIANT: Ensure that the root exists.\r\n            this.makeRootDirectory(cb);\r\n        }\r\n\r\n        getName() { return this.store.name(); }\r\n        \r\n        isReadOnly() { return false; }\r\n        \r\n        supportsSymlinks() { return false; }\r\n        \r\n        supportsProps() { return false; }\r\n        \r\n        supportsSynch() { return false; }\r\n        \r\n        /**\r\n         * Delete all contents stored in the file system.\r\n         */\r\n        empty(cb) {\r\n            if (this._cache) {\r\n                this._cache.removeAll();\r\n            }\r\n            this.store.clear((e) => {\r\n                if (noError(e, cb)) {\r\n                    // INVARIANT: Root always exists.\r\n                    this.makeRootDirectory(cb);\r\n                }\r\n            });\r\n        }\r\n        \r\n        rename(oldPath, newPath, cb) {\r\n            // TODO: Make rename compatible with the cache.\r\n            if (this._cache) {\r\n                // Clear and disable cache during renaming process.\r\n                const c = this._cache;\r\n                this._cache = null;\r\n                c.removeAll();\r\n                const oldCb = cb;\r\n                cb = (e) => {\r\n                    // Restore empty cache.\r\n                    this._cache = c;\r\n                    oldCb(e);\r\n                };\r\n            }\r\n            const tx = this.store.beginTransaction('readwrite');\r\n            const oldParent = paths.dirname(oldPath), oldName = paths.basename(oldPath);\r\n            const newParent = paths.dirname(newPath), newName = paths.basename(newPath);\r\n            const inodes = {};\r\n            const lists = {};\r\n            let errorOccurred = false;\r\n            // Invariant: Can't move a folder inside itself.\r\n            // This funny little hack ensures that the check passes only if oldPath\r\n            // is a subpath of newParent. We append '/' to avoid matching folders that\r\n            // are a substring of the bottom-most folder in the path.\r\n            if ((newParent + '/').indexOf(oldPath + '/') === 0) {\r\n                return cb(new FileError(ErrorCodes.EBUSY, oldParent));\r\n            }\r\n            /**\r\n             * Responsible for Phase 2 of the rename operation: Modifying and\r\n             * committing the directory listings. Called once we have successfully\r\n             * retrieved both the old and new parent's inodes and listings.\r\n             */\r\n            const theOleSwitcharoo = () => {\r\n                // Sanity check: Ensure both paths are present, and no error has occurred.\r\n                if (errorOccurred || !lists.hasOwnProperty(oldParent) || !lists.hasOwnProperty(newParent)) {\r\n                    return;\r\n                }\r\n                const oldParentList = lists[oldParent], oldParentINode = inodes[oldParent], newParentList = lists[newParent], newParentINode = inodes[newParent];\r\n                // Delete file from old parent.\r\n                if (!oldParentList[oldName]) {\r\n                    cb(FileError.ENOENT(oldPath));\r\n                }\r\n                else {\r\n                    const fileId = oldParentList[oldName];\r\n                    delete oldParentList[oldName];\r\n                    // Finishes off the renaming process by adding the file to the new\r\n                    // parent.\r\n                    const completeRename = () => {\r\n                        newParentList[newName] = fileId;\r\n                        // Commit old parent's list.\r\n                        tx.put(oldParentINode.id, Buffer.from(JSON.stringify(oldParentList)), true, (e) => {\r\n                            if (noErrorTx(e, tx, cb)) {\r\n                                if (oldParent === newParent) {\r\n                                    // DONE!\r\n                                    tx.commit(cb);\r\n                                }\r\n                                else {\r\n                                    // Commit new parent's list.\r\n                                    tx.put(newParentINode.id, Buffer.from(JSON.stringify(newParentList)), true, (e) => {\r\n                                        if (noErrorTx(e, tx, cb)) {\r\n                                            tx.commit(cb);\r\n                                        }\r\n                                    });\r\n                                }\r\n                            }\r\n                        });\r\n                    };\r\n                    if (newParentList[newName]) {\r\n                        // 'newPath' already exists. Check if it's a file or a directory, and\r\n                        // act accordingly.\r\n                        this.getINode(tx, newPath, newParentList[newName], (e, inode) => {\r\n                            if (noErrorTx(e, tx, cb)) {\r\n                                if (inode.isFile()) {\r\n                                    // Delete the file and continue.\r\n                                    tx.del(inode.id, (e) => {\r\n                                        if (noErrorTx(e, tx, cb)) {\r\n                                            tx.del(newParentList[newName], (e) => {\r\n                                                if (noErrorTx(e, tx, cb)) {\r\n                                                    completeRename();\r\n                                                }\r\n                                            });\r\n                                        }\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    // Can't overwrite a directory using rename.\r\n                                    tx.abort((e) => {\r\n                                        cb(FileError.EPERM(newPath));\r\n                                    });\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        completeRename();\r\n                    }\r\n                }\r\n            };\r\n            /**\r\n             * Grabs a path's inode and directory listing, and shoves it into the\r\n             * inodes and lists hashes.\r\n             */\r\n            const processInodeAndListings = (p) => {\r\n                this.findINodeAndDirListing(tx, p, (e, node, dirList) => {\r\n                    if (e) {\r\n                        if (!errorOccurred) {\r\n                            errorOccurred = true;\r\n                            tx.abort(() => {\r\n                                cb(e);\r\n                            });\r\n                        }\r\n                        // If error has occurred already, just stop here.\r\n                    }\r\n                    else {\r\n                        inodes[p] = node;\r\n                        lists[p] = dirList;\r\n                        theOleSwitcharoo();\r\n                    }\r\n                });\r\n            };\r\n            processInodeAndListings(oldParent);\r\n            if (oldParent !== newParent) {\r\n                processInodeAndListings(newParent);\r\n            }\r\n        }\r\n        stat(p, isLstat, cb) {\r\n            const tx = this.store.beginTransaction('readonly');\r\n            this.findINode(tx, p, (e, inode) => {\r\n                if (noError(e, cb)) {\r\n                    cb(null, inode.toStats());\r\n                }\r\n            });\r\n        }\r\n        createFile(p, flag, mode, cb) {\r\n            const tx = this.store.beginTransaction('readwrite'), data = emptyBuffer();\r\n            this.commitNewFile(tx, p, FileType.FILE, mode, data, (e, newFile) => {\r\n                if (noError(e, cb)) {\r\n                    cb(null, new AsyncKeyValueFile(this, p, flag, newFile.toStats(), data));\r\n                }\r\n            });\r\n        }\r\n\r\n        openFile(p, flag, cb) {\r\n            const tx = this.store.beginTransaction('readonly');\r\n            // Step 1: Grab the file's inode.\r\n            this.findINode(tx, p, (e, inode) => {\r\n                if (noError(e, cb)) {\r\n                    // Step 2: Grab the file's data.\r\n                    tx.get(inode.id, (e, data) => {\r\n                        if (noError(e, cb)) {\r\n                            if (data === undefined) {\r\n                                cb(FileError.ENOENT(p));\r\n                            }\r\n                            else {\r\n                                cb(null, new AsyncKeyValueFile(this, p, flag, inode.toStats(), data));\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n\r\n        unlink(p, cb) {\r\n            this.removeEntry(p, false, cb);\r\n        }\r\n        \r\n        rmdir(p, cb) {\r\n            // Check first if directory is empty.\r\n            this.readdir(p, (err, files) => {\r\n                if (err) {\r\n                    cb(err);\r\n                }\r\n                else if (files.length > 0) {\r\n                    cb(FileError.ENOTEMPTY(p));\r\n                }\r\n                else {\r\n                    this.removeEntry(p, true, cb);\r\n                }\r\n            });\r\n        }\r\n        \r\n        mkdir(p, mode, cb) {\r\n            const tx = this.store.beginTransaction('readwrite'), data = Buffer.from('{}');\r\n            this.commitNewFile(tx, p, FileType.DIRECTORY, mode, data, cb);\r\n        }\r\n        \r\n        readdir(p, cb) {\r\n            const tx = this.store.beginTransaction('readonly');\r\n            this.findINode(tx, p, (e, inode) => {\r\n                if (noError(e, cb)) {\r\n                    this.getDirListing(tx, p, inode, (e, dirListing) => {\r\n                        if (noError(e, cb)) {\r\n                            cb(null, Object.keys(dirListing));\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        \r\n        _sync(p, data, stats, cb) {\r\n            // @todo Ensure mtime updates properly, and use that to determine if a data\r\n            //       update is required.\r\n            const tx = this.store.beginTransaction('readwrite');\r\n            // Step 1: Get the file node's ID.\r\n            this._findINode(tx, paths.dirname(p), paths.basename(p), (e, fileInodeId) => {\r\n                if (noErrorTx(e, tx, cb)) {\r\n                    // Step 2: Get the file inode.\r\n                    this.getINode(tx, p, fileInodeId, (e, fileInode) => {\r\n                        if (noErrorTx(e, tx, cb)) {\r\n                            const inodeChanged = fileInode.update(stats);\r\n                            // Step 3: Sync the data.\r\n                            tx.put(fileInode.id, data, true, (e) => {\r\n                                if (noErrorTx(e, tx, cb)) {\r\n                                    // Step 4: Sync the metadata (if it changed)!\r\n                                    if (inodeChanged) {\r\n                                        tx.put(fileInodeId, fileInode.toBuffer(), true, (e) => {\r\n                                            if (noErrorTx(e, tx, cb)) {\r\n                                                tx.commit(cb);\r\n                                            }\r\n                                        });\r\n                                    }\r\n                                    else {\r\n                                        // No need to sync metadata; return.\r\n                                        tx.commit(cb);\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        /**\r\n         * Checks if the root directory exists. Creates it if it doesn't.\r\n         */\r\n        makeRootDirectory(cb) {\r\n            const tx = this.store.beginTransaction('readwrite');\r\n            tx.get(ROOT_NODE_ID, (e, data) => {\r\n                if (e || data === undefined) {\r\n                    // Create new inode.\r\n                    const currTime = (new Date()).getTime(), \r\n                    // Mode 0666\r\n                    dirInode = new Inode(GenerateRandomID(), 4096, 511 | FileType.DIRECTORY, currTime, currTime, currTime);\r\n                    // If the root doesn't exist, the first random ID shouldn't exist,\r\n                    // either.\r\n                    tx.put(dirInode.id, getEmptyDirNode(), false, (e) => {\r\n                        if (noErrorTx(e, tx, cb)) {\r\n                            tx.put(ROOT_NODE_ID, dirInode.toBuffer(), false, (e) => {\r\n                                if (e) {\r\n                                    tx.abort(() => { cb(e); });\r\n                                }\r\n                                else {\r\n                                    tx.commit(cb);\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    // We're good.\r\n                    tx.commit(cb);\r\n                }\r\n            });\r\n        }\r\n        /**\r\n         * Helper function for findINode.\r\n         * @param parent The parent directory of the file we are attempting to find.\r\n         * @param filename The filename of the inode we are attempting to find, minus\r\n         *   the parent.\r\n         * @param cb Passed an error or the ID of the file's inode in the file system.\r\n         */\r\n        _findINode(tx, parent, filename, cb) {\r\n            if (this._cache) {\r\n                const id = this._cache.get(paths.join(parent, filename));\r\n                if (id) {\r\n                    return cb(null, id);\r\n                }\r\n            }\r\n            const handleDirectoryListings = (e, inode, dirList) => {\r\n                if (e) {\r\n                    cb(e);\r\n                }\r\n                else if (dirList[filename]) {\r\n                    const id = dirList[filename];\r\n                    if (this._cache) {\r\n                        this._cache.set(paths.join(parent, filename), id);\r\n                    }\r\n                    cb(null, id);\r\n                }\r\n                else {\r\n                    cb(FileError.ENOENT(paths.resolve(parent, filename)));\r\n                }\r\n            };\r\n            if (parent === '/') {\r\n                if (filename === '') {\r\n                    // BASE CASE #1: Return the root's ID.\r\n                    if (this._cache) {\r\n                        this._cache.set(paths.join(parent, filename), ROOT_NODE_ID);\r\n                    }\r\n                    cb(null, ROOT_NODE_ID);\r\n                }\r\n                else {\r\n                    // BASE CASE #2: Find the item in the root node.\r\n                    this.getINode(tx, parent, ROOT_NODE_ID, (e, inode) => {\r\n                        if (noError(e, cb)) {\r\n                            this.getDirListing(tx, parent, inode, (e, dirList) => {\r\n                                // handle_directory_listings will handle e for us.\r\n                                handleDirectoryListings(e, inode, dirList);\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                // Get the parent directory's INode, and find the file in its directory\r\n                // listing.\r\n                this.findINodeAndDirListing(tx, parent, handleDirectoryListings);\r\n            }\r\n        }\r\n        /**\r\n         * Finds the Inode of the given path.\r\n         * @param p The path to look up.\r\n         * @param cb Passed an error or the Inode of the path p.\r\n         * @todo memoize/cache\r\n         */\r\n        findINode(tx, p, cb) {\r\n            this._findINode(tx, paths.dirname(p), paths.basename(p), (e, id) => {\r\n                if (noError(e, cb)) {\r\n                    this.getINode(tx, p, id, cb);\r\n                }\r\n            });\r\n        }\r\n        /**\r\n         * Given the ID of a node, retrieves the corresponding Inode.\r\n         * @param tx The transaction to use.\r\n         * @param p The corresponding path to the file (used for error messages).\r\n         * @param id The ID to look up.\r\n         * @param cb Passed an error or the inode under the given id.\r\n         */\r\n        getINode(tx, p, id, cb) {\r\n            tx.get(id, (e, data) => {\r\n                if (noError(e, cb)) {\r\n                    if (data === undefined) {\r\n                        cb(FileError.ENOENT(p));\r\n                    }\r\n                    else {\r\n                        cb(null, Inode.fromBuffer(data));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        /**\r\n         * Given the Inode of a directory, retrieves the corresponding directory\r\n         * listing.\r\n         */\r\n        getDirListing(tx, p, inode, cb) {\r\n            if (!inode.isDirectory()) {\r\n                cb(FileError.ENOTDIR(p));\r\n            }\r\n            else {\r\n                tx.get(inode.id, (e, data) => {\r\n                    if (noError(e, cb)) {\r\n                        try {\r\n                            cb(null, JSON.parse(data.toString()));\r\n                        }\r\n                        catch (e) {\r\n                            // Occurs when data is undefined, or corresponds to something other\r\n                            // than a directory listing. The latter should never occur unless\r\n                            // the file system is corrupted.\r\n                            cb(FileError.ENOENT(p));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        /**\r\n         * Given a path to a directory, retrieves the corresponding INode and\r\n         * directory listing.\r\n         */\r\n        findINodeAndDirListing(tx, p, cb) {\r\n            this.findINode(tx, p, (e, inode) => {\r\n                if (noError(e, cb)) {\r\n                    this.getDirListing(tx, p, inode, (e, listing) => {\r\n                        if (noError(e, cb)) {\r\n                            cb(null, inode, listing);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        /**\r\n         * Adds a new node under a random ID. Retries 5 times before giving up in\r\n         * the exceedingly unlikely chance that we try to reuse a random GUID.\r\n         * @param cb Passed an error or the GUID that the data was stored under.\r\n         */\r\n        addNewNode(tx, data, cb) {\r\n            let retries = 0, currId;\r\n            const reroll = () => {\r\n                if (++retries === 5) {\r\n                    // Max retries hit. Return with an error.\r\n                    cb(new FileError(ErrorCodes.EIO, 'Unable to commit data to key-value store.'));\r\n                }\r\n                else {\r\n                    // Try again.\r\n                    currId = GenerateRandomID();\r\n                    tx.put(currId, data, false, (e, committed) => {\r\n                        if (e || !committed) {\r\n                            reroll();\r\n                        }\r\n                        else {\r\n                            // Successfully stored under 'currId'.\r\n                            cb(null, currId);\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n            reroll();\r\n        }\r\n        /**\r\n         * Commits a new file (well, a FILE or a DIRECTORY) to the file system with\r\n         * the given mode.\r\n         * Note: This will commit the transaction.\r\n         * @param p The path to the new file.\r\n         * @param type The type of the new file.\r\n         * @param mode The mode to create the new file with.\r\n         * @param data The data to store at the file's data node.\r\n         * @param cb Passed an error or the Inode for the new file.\r\n         */\r\n        commitNewFile(tx, p, type, mode, data, cb) {\r\n            const parentDir = paths.dirname(p), fname = paths.basename(p), currTime = (new Date()).getTime();\r\n            // Invariant: The root always exists.\r\n            // If we don't check this prior to taking steps below, we will create a\r\n            // file with name '' in root should p == '/'.\r\n            if (p === '/') {\r\n                return cb(FileError.EEXIST(p));\r\n            }\r\n            // Let's build a pyramid of code!\r\n            // Step 1: Get the parent directory's inode and directory listing\r\n            this.findINodeAndDirListing(tx, parentDir, (e, parentNode, dirListing) => {\r\n                if (noErrorTx(e, tx, cb)) {\r\n                    if (dirListing[fname]) {\r\n                        // File already exists.\r\n                        tx.abort(() => {\r\n                            cb(FileError.EEXIST(p));\r\n                        });\r\n                    }\r\n                    else {\r\n                        // Step 2: Commit data to store.\r\n                        this.addNewNode(tx, data, (e, dataId) => {\r\n                            if (noErrorTx(e, tx, cb)) {\r\n                                // Step 3: Commit the file's inode to the store.\r\n                                const fileInode = new Inode(dataId, data.length, mode | type, currTime, currTime, currTime);\r\n                                this.addNewNode(tx, fileInode.toBuffer(), (e, fileInodeId) => {\r\n                                    if (noErrorTx(e, tx, cb)) {\r\n                                        // Step 4: Update parent directory's listing.\r\n                                        dirListing[fname] = fileInodeId;\r\n                                        tx.put(parentNode.id, Buffer.from(JSON.stringify(dirListing)), true, (e) => {\r\n                                            if (noErrorTx(e, tx, cb)) {\r\n                                                // Step 5: Commit and return the new inode.\r\n                                                tx.commit((e) => {\r\n                                                    if (noErrorTx(e, tx, cb)) {\r\n                                                        cb(null, fileInode);\r\n                                                    }\r\n                                                });\r\n                                            }\r\n                                        });\r\n                                    }\r\n                                });\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        /**\r\n         * Remove all traces of the given path from the file system.\r\n         * @param p The path to remove from the file system.\r\n         * @param isDir Does the path belong to a directory, or a file?\r\n         * @todo Update mtime.\r\n         */\r\n        removeEntry(p, isDir, cb) {\r\n            // Eagerly delete from cache (harmless even if removal fails)\r\n            if (this._cache) {\r\n                this._cache.remove(p);\r\n            }\r\n            const tx = this.store.beginTransaction('readwrite'), parent = paths.dirname(p), fileName = paths.basename(p);\r\n            // Step 1: Get parent directory's node and directory listing.\r\n            this.findINodeAndDirListing(tx, parent, (e, parentNode, parentListing) => {\r\n                if (noErrorTx(e, tx, cb)) {\r\n                    if (!parentListing[fileName]) {\r\n                        tx.abort(() => {\r\n                            cb(FileError.ENOENT(p));\r\n                        });\r\n                    }\r\n                    else {\r\n                        // Remove from directory listing of parent.\r\n                        const fileNodeId = parentListing[fileName];\r\n                        delete parentListing[fileName];\r\n                        // Step 2: Get file inode.\r\n                        this.getINode(tx, p, fileNodeId, (e, fileNode) => {\r\n                            if (noErrorTx(e, tx, cb)) {\r\n                                if (!isDir && fileNode.isDirectory()) {\r\n                                    tx.abort(() => {\r\n                                        cb(FileError.EISDIR(p));\r\n                                    });\r\n                                }\r\n                                else if (isDir && !fileNode.isDirectory()) {\r\n                                    tx.abort(() => {\r\n                                        cb(FileError.ENOTDIR(p));\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    // Step 3: Delete data.\r\n                                    tx.del(fileNode.id, (e) => {\r\n                                        if (noErrorTx(e, tx, cb)) {\r\n                                            // Step 4: Delete node.\r\n                                            tx.del(fileNodeId, (e) => {\r\n                                                if (noErrorTx(e, tx, cb)) {\r\n                                                    // Step 5: Update directory listing.\r\n                                                    tx.put(parentNode.id, Buffer.from(JSON.stringify(parentListing)), true, (e) => {\r\n                                                        if (noErrorTx(e, tx, cb)) {\r\n                                                            tx.commit(cb);\r\n                                                        }\r\n                                                    });\r\n                                                }\r\n                                            });\r\n                                        }\r\n                                    });\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    return  files.providers.AsyncKeyValueProvider = AsyncKeyValueProvider;\r\n});"]}