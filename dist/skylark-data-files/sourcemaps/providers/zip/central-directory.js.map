{"version":3,"sources":["providers/zip/central-directory.js"],"names":["define","ErrorCodes","FileError","Stats","msdos2date","safeToString","FileHeader","FileData","[object Object]","zipData","data","this","readUInt32LE","EINVAL","_filename","produceFilename","readUInt16LE","useUTF8","fileNameLength","replace","slice","start","extraFieldLength","fileCommentLength","fileName","externalAttributes","charAt","length","isDirectory","flag","headerRelativeOffset","header","totalSize","getFileData","decompress","getRawData","FileType","FILE","uncompressedSize","Date","now","lastModFileTime","getTime"],"mappings":";;;;;;;AAAAA,QACI,oBACA,mBACA,cACA,eACA,mBACA,gBACA,eACD,SAAUC,EAAYC,EAAWC,EAAOC,EAAWC,EAAaC,EAAWC,GAC1E,aAoIA,aAtGIC,YAAYC,EAASC,GAIjB,GAHAC,KAAKF,QAAUA,EACfE,KAAKD,KAAOA,EAEsB,WAA9BC,KAAKD,KAAKE,aAAa,GACvB,MAAM,IAAIV,EAAUD,EAAWY,4EAA6EF,KAAKD,KAAKE,aAAa,MAEvID,KAAKG,UAAYH,KAAKI,kBAE1BP,gBAAkB,OAAOG,KAAKD,KAAKM,aAAa,GAChDR,gBAAkB,OAAOG,KAAKD,KAAKM,aAAa,GAChDR,OAAS,OAAOG,KAAKD,KAAKM,aAAa,GACvCR,oBAAsB,OAAOG,KAAKD,KAAKM,aAAa,IACpDR,kBAEI,OAAOJ,EAAWO,KAAKD,KAAKM,aAAa,IAAKL,KAAKD,KAAKM,aAAa,KAEzER,qBACI,OAAOG,KAAKD,KAAKE,aAAa,IAElCJ,QAAU,OAAOG,KAAKD,KAAKE,aAAa,IACxCJ,iBAAmB,OAAOG,KAAKD,KAAKE,aAAa,IACjDJ,mBAAqB,OAAOG,KAAKD,KAAKE,aAAa,IACnDJ,iBAAmB,OAAOG,KAAKD,KAAKM,aAAa,IACjDR,mBAAqB,OAAOG,KAAKD,KAAKM,aAAa,IACnDR,oBAAsB,OAAOG,KAAKD,KAAKM,aAAa,IACpDR,kBAAoB,OAAOG,KAAKD,KAAKM,aAAa,IAClDR,qBAAuB,OAAOG,KAAKD,KAAKM,aAAa,IACrDR,qBAAuB,OAAOG,KAAKD,KAAKE,aAAa,IACrDJ,uBAAyB,OAAOG,KAAKD,KAAKE,aAAa,IACvDJ,kBAeI,OADiBH,EAAaM,KAAKD,KAAMC,KAAKM,UAAW,GAAIN,KAAKO,kBAClDC,QAAQ,MAAO,KAEnCX,WACI,OAAOG,KAAKG,UAEhBN,cACI,OAAOG,KAAKD,KAAKU,MAAM,GAAI,GAAKT,KAAKO,kBAEzCV,aACI,MAAMa,EAAQ,GAAKV,KAAKO,iBACxB,OAAOP,KAAKD,KAAKU,MAAMC,EAAOA,EAAQV,KAAKW,oBAE/Cd,cACI,MAAMa,EAAQ,GAAKV,KAAKO,iBAAmBP,KAAKW,mBAChD,OAAOjB,EAAaM,KAAKD,KAAMC,KAAKM,UAAWI,EAAOV,KAAKY,qBAE/Df,iBACI,MAAMa,EAAQ,GAAKV,KAAKO,iBAAmBP,KAAKW,mBAChD,OAAOX,KAAKD,KAAKU,MAAMC,EAAOA,EAAQV,KAAKY,qBAE/Cf,YACI,OAAO,GAAKG,KAAKO,iBAAmBP,KAAKW,mBAAqBX,KAAKY,oBAEvEf,cASI,MAAMgB,EAAWb,KAAKa,WACtB,SAAoC,GAA5Bb,KAAKc,uBAAyF,MAAzCD,EAASE,OAAOF,EAASG,OAAS,GAEnGnB,SAAW,OAAQG,KAAKiB,cACxBpB,UAAY,OAAiC,OAAX,KAAdG,KAAKkB,QACzBrB,cAAgB,OAA+B,IAAT,EAAdG,KAAKkB,QAC7BrB,cAGI,MAAMa,EAAQV,KAAKmB,uBACbC,EAAS,IAAIzB,EAAWK,KAAKF,QAAQW,MAAMC,IACjD,OAAO,IAAId,EAASwB,EAAQpB,KAAMA,KAAKF,QAAQW,MAAMC,EAAQU,EAAOC,cAExExB,UACI,OAAOG,KAAKsB,cAAcC,aAE9B1B,aACI,OAAOG,KAAKsB,cAAcE,aAE9B3B,WACI,OAAO,IAAIL,EAAMiC,SAASC,KAAM1B,KAAK2B,mBAAoB,IAAOC,KAAKC,MAAO7B,KAAK8B,kBAAkBC","file":"../../../providers/zip/central-directory.js","sourcesContent":["define([\r\n    '../../error-codes',\r\n    '../../file-error',\r\n    '../../stats',\r\n    \"./msdos2date\",\r\n    \"./safe-to-string\",\r\n    \"./file-header\",\r\n    \"./file-data\"\r\n], function (ErrorCodes, FileError, Stats, msdos2date,safeToString,FileHeader,FileData) {\r\n    'use strict';\r\n\r\n\r\n\r\n    /**\r\n     * 4.3.12  Central directory structure:\r\n     *\r\n     *  central file header signature   4 bytes  (0x02014b50)\r\n     *  version made by                 2 bytes\r\n     *  version needed to extract       2 bytes\r\n     *  general purpose bit flag        2 bytes\r\n     *  compression method              2 bytes\r\n     *  last mod file time              2 bytes\r\n     *  last mod file date              2 bytes\r\n     *  crc-32                          4 bytes\r\n     *  compressed size                 4 bytes\r\n     *  uncompressed size               4 bytes\r\n     *  file name length                2 bytes\r\n     *  extra field length              2 bytes\r\n     *  file comment length             2 bytes\r\n     *  disk number start               2 bytes\r\n     *  internal file attributes        2 bytes\r\n     *  external file attributes        4 bytes\r\n     *  relative offset of local header 4 bytes\r\n     *\r\n     *  file name (variable size)\r\n     *  extra field (variable size)\r\n     *  file comment (variable size)\r\n     */\r\n    class CentralDirectory {\r\n        constructor(zipData, data) {\r\n            this.zipData = zipData;\r\n            this.data = data;\r\n            // Sanity check.\r\n            if (this.data.readUInt32LE(0) !== 0x02014b50) {\r\n                throw new FileError(ErrorCodes.EINVAL, `Invalid Zip file: Central directory record has invalid signature: ${this.data.readUInt32LE(0)}`);\r\n            }\r\n            this._filename = this.produceFilename();\r\n        }\r\n        versionMadeBy() { return this.data.readUInt16LE(4); }\r\n        versionNeeded() { return this.data.readUInt16LE(6); }\r\n        flag() { return this.data.readUInt16LE(8); }\r\n        compressionMethod() { return this.data.readUInt16LE(10); }\r\n        lastModFileTime() {\r\n            // Time and date is in MS-DOS format.\r\n            return msdos2date(this.data.readUInt16LE(12), this.data.readUInt16LE(14));\r\n        }\r\n        rawLastModFileTime() {\r\n            return this.data.readUInt32LE(12);\r\n        }\r\n        crc32() { return this.data.readUInt32LE(16); }\r\n        compressedSize() { return this.data.readUInt32LE(20); }\r\n        uncompressedSize() { return this.data.readUInt32LE(24); }\r\n        fileNameLength() { return this.data.readUInt16LE(28); }\r\n        extraFieldLength() { return this.data.readUInt16LE(30); }\r\n        fileCommentLength() { return this.data.readUInt16LE(32); }\r\n        diskNumberStart() { return this.data.readUInt16LE(34); }\r\n        internalAttributes() { return this.data.readUInt16LE(36); }\r\n        externalAttributes() { return this.data.readUInt32LE(38); }\r\n        headerRelativeOffset() { return this.data.readUInt32LE(42); }\r\n        produceFilename() {\r\n            /*\r\n              4.4.17.1 claims:\r\n              * All slashes are forward ('/') slashes.\r\n              * Filename doesn't begin with a slash.\r\n              * No drive letters or any nonsense like that.\r\n              * If filename is missing, the input came from standard input.\r\n        \r\n              Unfortunately, this isn't true in practice. Some Windows zip utilities use\r\n              a backslash here, but the correct Unix-style path in file headers.\r\n        \r\n              To avoid seeking all over the file to recover the known-good filenames\r\n              from file headers, we simply convert '/' to '\\' here.\r\n            */\r\n            const fileName = safeToString(this.data, this.useUTF8(), 46, this.fileNameLength());\r\n            return fileName.replace(/\\\\/g, \"/\");\r\n        }\r\n        fileName() {\r\n            return this._filename;\r\n        }\r\n        rawFileName() {\r\n            return this.data.slice(46, 46 + this.fileNameLength());\r\n        }\r\n        extraField() {\r\n            const start = 44 + this.fileNameLength();\r\n            return this.data.slice(start, start + this.extraFieldLength());\r\n        }\r\n        fileComment() {\r\n            const start = 46 + this.fileNameLength() + this.extraFieldLength();\r\n            return safeToString(this.data, this.useUTF8(), start, this.fileCommentLength());\r\n        }\r\n        rawFileComment() {\r\n            const start = 46 + this.fileNameLength() + this.extraFieldLength();\r\n            return this.data.slice(start, start + this.fileCommentLength());\r\n        }\r\n        totalSize() {\r\n            return 46 + this.fileNameLength() + this.extraFieldLength() + this.fileCommentLength();\r\n        }\r\n        isDirectory() {\r\n            // NOTE: This assumes that the zip file implementation uses the lower byte\r\n            //       of external attributes for DOS attributes for\r\n            //       backwards-compatibility. This is not mandated, but appears to be\r\n            //       commonplace.\r\n            //       According to the spec, the layout of external attributes is\r\n            //       platform-dependent.\r\n            //       If that fails, we also check if the name of the file ends in '/',\r\n            //       which is what Java's ZipFile implementation does.\r\n            const fileName = this.fileName();\r\n            return (this.externalAttributes() & 0x10 ? true : false) || (fileName.charAt(fileName.length - 1) === '/');\r\n        }\r\n        isFile() { return !this.isDirectory(); }\r\n        useUTF8() { return (this.flag() & 0x800) === 0x800; }\r\n        isEncrypted() { return (this.flag() & 0x1) === 0x1; }\r\n        getFileData() {\r\n            // Need to grab the header before we can figure out where the actual\r\n            // compressed data starts.\r\n            const start = this.headerRelativeOffset();\r\n            const header = new FileHeader(this.zipData.slice(start));\r\n            return new FileData(header, this, this.zipData.slice(start + header.totalSize()));\r\n        }\r\n        getData() {\r\n            return this.getFileData().decompress();\r\n        }\r\n        getRawData() {\r\n            return this.getFileData().getRawData();\r\n        }\r\n        getStats() {\r\n            return new Stats(FileType.FILE, this.uncompressedSize(), 0x16D, Date.now(), this.lastModFileTime().getTime());\r\n        }\r\n    }\r\n\r\n\r\n    return CentralDirectory;\r\n\r\n});"]}