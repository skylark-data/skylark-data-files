{"version":3,"sources":["providers/overlay/overlay-provider.js"],"names":["define","paths","Stats","FileType","FileError","ErrorCodes","FileFlag","ActionType","LockedProvider","UnlockedOverlayProvider","OverlayProvider","[object Object]","writable","readable","super","opts","cb","fs","_initialize","e","isAvailable","getFSUnlocked","getOverlayedProviders","Name","Options","type","description"],"mappings":";;;;;;;AAAAA,QACI,sBACA,cACA,kBACA,mBACA,oBACA,kBACA,oBACA,qBACA,+BACD,SAAUC,EAAOC,EAAMC,EAASC,EAAWC,EAAYC,EAASC,EAAWC,EAAeC,SAQnFC,UAAwBF,EAK1BG,YAAYC,EAAUC,GAClBC,MAAM,IAAIL,EAAwBG,EAAUC,IAKhDF,cAAcI,EAAMC,GAChB,IACI,MAAMC,EAAK,IAAIP,EAAgBK,EAAKH,SAAUG,EAAKF,UACnDI,EAAGC,YAAaC,IACZH,EAAGG,EAAGF,KAGd,MAAOE,GACHH,EAAGG,IAGXR,qBACI,OAAOF,EAAwBW,cAEnCT,wBACI,OAAOG,MAAMO,gBAAgBC,wBAEjCX,SACI,OAAOG,MAAMO,gBAEjBV,YAAYK,GACRF,MAAMO,gBAAgBH,YAAYF,IAe1C,OAZAN,EAAgBa,KAAO,kBACvBb,EAAgBc,SACZZ,UACIa,KAAM,SACNC,YAAa,+CAEjBb,UACIY,KAAM,SACNC,YAAa,+DAIdhB","file":"../../../providers/overlay/overlay-provider.js","sourcesContent":["define([\r\n    \"skylark-langx-paths\",\r\n    '../../stats',\r\n    '../../file-type',\r\n    '../../file-error',\r\n    '../../error-codes',\r\n    \"../../file-flag\",\r\n    \"../../action-type\",\r\n    \"../locked-provider\",\r\n    \"./unlocked-overlay-provider\"\r\n], function (paths, Stats,FileType,FileError, ErrorCodes, FileFlag,ActionType,LockedProvider,UnlockedOverlayProvider) {\r\n\r\n\r\n    /**\r\n     * OverlayProvidermakes a read-only filesystem writable by storing writes on a second,\r\n     * writable file system. Deletes are persisted via metadata stored on the writable\r\n     * file system.\r\n     */\r\n    class OverlayProvider extends LockedProvider {\r\n        /**\r\n         * @param writable The file system to write modified files to.\r\n         * @param readable The file system that initially populates this file system.\r\n         */\r\n        constructor(writable, readable) {\r\n            super(new UnlockedOverlayProvider(writable, readable));\r\n        }\r\n        /**\r\n         * Constructs and initializes an OverlayProviderinstance with the given options.\r\n         */\r\n        static Create(opts, cb) {\r\n            try {\r\n                const fs = new OverlayProvider(opts.writable, opts.readable);\r\n                fs._initialize((e) => {\r\n                    cb(e, fs);\r\n                });\r\n            }\r\n            catch (e) {\r\n                cb(e);\r\n            }\r\n        }\r\n        static isAvailable() {\r\n            return UnlockedOverlayProvider.isAvailable();\r\n        }\r\n        getOverlayedProviders() {\r\n            return super.getFSUnlocked().getOverlayedProviders();\r\n        }\r\n        unwrap() {\r\n            return super.getFSUnlocked();\r\n        }\r\n        _initialize(cb) {\r\n            super.getFSUnlocked()._initialize(cb);\r\n        }\r\n    }\r\n    OverlayProvider.Name = \"OverlayProvider\";\r\n    OverlayProvider.Options = {\r\n        writable: {\r\n            type: \"object\",\r\n            description: \"The file system to write modified files to.\"\r\n        },\r\n        readable: {\r\n            type: \"object\",\r\n            description: \"The file system that initially populates this file system.\"\r\n        }\r\n    };\r\n\r\n    return OverlayProvider;\r\n});"]}