{"version":3,"sources":["providers/iso/directory-record.js"],"names":["define","[object Object]","data","rockRidgeOffset","this","_suEntries","_fileOrDir","_data","_rockRidgeOffset","isoData","dir","getDirectory","getDotEntry","_getRockRidgeOffset","readUInt32LE","getShortFormDate","readUInt16LE","_getString","hasRockRidge","fn","_rockRidgeFilename","ident","identifier","isDirectory","versionSeparator","indexOf","slice","rv","fileFlags","getSUEntries","filter","e","CLEntry","length","SLEntry","p","entries","getStr","_getGetString","entry","components","componentRecords","component","flags","content","continueFlag","Error","lba","dataLength","_constructDirectory","_constructSUEntries","nmEntries","NMEntry","str","getString","name","i","constructSystemUseEntries","suEntries","spEntry","SPEntry","checkBytesPass","RREntry","EREntry","extensionIdentifier","rockRidgeIdentifier","bytesSkipped"],"mappings":"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","file":"../../../providers/iso/directory-record.js","sourcesContent":["define([\r\n], function () {\r\n    'use strict';\r\n\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    class DirectoryRecord {\r\n        constructor(data, rockRidgeOffset) {\r\n            this._suEntries = null;\r\n            this._fileOrDir = null;\r\n            this._data = data;\r\n            this._rockRidgeOffset = rockRidgeOffset;\r\n        }\r\n        hasRockRidge() {\r\n            return this._rockRidgeOffset > -1;\r\n        }\r\n        getRockRidgeOffset() {\r\n            return this._rockRidgeOffset;\r\n        }\r\n        /**\r\n         * !!ONLY VALID ON ROOT NODE!!\r\n         * Checks if Rock Ridge is enabled, and sets the offset.\r\n         */\r\n        rootCheckForRockRidge(isoData) {\r\n            const dir = this.getDirectory(isoData);\r\n            this._rockRidgeOffset = dir.getDotEntry(isoData)._getRockRidgeOffset(isoData);\r\n            if (this._rockRidgeOffset > -1) {\r\n                // Wipe out directory. Start over with RR knowledge.\r\n                this._fileOrDir = null;\r\n            }\r\n        }\r\n        length() {\r\n            return this._data[0];\r\n        }\r\n        extendedAttributeRecordLength() {\r\n            return this._data[1];\r\n        }\r\n        lba() {\r\n            return this._data.readUInt32LE(2) * 2048;\r\n        }\r\n        dataLength() {\r\n            return this._data.readUInt32LE(10);\r\n        }\r\n        recordingDate() {\r\n            return getShortFormDate(this._data, 18);\r\n        }\r\n        fileFlags() {\r\n            return this._data[25];\r\n        }\r\n        fileUnitSize() {\r\n            return this._data[26];\r\n        }\r\n        interleaveGapSize() {\r\n            return this._data[27];\r\n        }\r\n        volumeSequenceNumber() {\r\n            return this._data.readUInt16LE(28);\r\n        }\r\n        identifier() {\r\n            return this._getString(33, this._data[32]);\r\n        }\r\n        fileName(isoData) {\r\n            if (this.hasRockRidge()) {\r\n                const fn = this._rockRidgeFilename(isoData);\r\n                if (fn !== null) {\r\n                    return fn;\r\n                }\r\n            }\r\n            const ident = this.identifier();\r\n            if (this.isDirectory(isoData)) {\r\n                return ident;\r\n            }\r\n            // Files:\r\n            // - MUST have 0x2E (.) separating the name from the extension\r\n            // - MUST have 0x3B (;) separating the file name and extension from the version\r\n            // Gets expanded to two-byte char in Unicode directory records.\r\n            const versionSeparator = ident.indexOf(';');\r\n            if (versionSeparator === -1) {\r\n                // Some Joliet filenames lack the version separator, despite the standard\r\n                // specifying that it should be there.\r\n                return ident;\r\n            }\r\n            else if (ident[versionSeparator - 1] === '.') {\r\n                // Empty extension. Do not include '.' in the filename.\r\n                return ident.slice(0, versionSeparator - 1);\r\n            }\r\n            else {\r\n                // Include up to version separator.\r\n                return ident.slice(0, versionSeparator);\r\n            }\r\n        }\r\n        isDirectory(isoData) {\r\n            let rv = !!(this.fileFlags() & 2 /* Directory */);\r\n            // If it lacks the Directory flag, it may still be a directory if we've exceeded the directory\r\n            // depth limit. Rock Ridge marks these as files and adds a special attribute.\r\n            if (!rv && this.hasRockRidge()) {\r\n                rv = this.getSUEntries(isoData).filter((e) => e instanceof CLEntry).length > 0;\r\n            }\r\n            return rv;\r\n        }\r\n        isSymlink(isoData) {\r\n            return this.hasRockRidge() && this.getSUEntries(isoData).filter((e) => e instanceof SLEntry).length > 0;\r\n        }\r\n        getSymlinkPath(isoData) {\r\n            let p = \"\";\r\n            const entries = this.getSUEntries(isoData);\r\n            const getStr = this._getGetString();\r\n            for (const entry of entries) {\r\n                if (entry instanceof SLEntry) {\r\n                    const components = entry.componentRecords();\r\n                    for (const component of components) {\r\n                        const flags = component.flags();\r\n                        if (flags & 2 /* CURRENT */) {\r\n                            p += \"./\";\r\n                        }\r\n                        else if (flags & 4 /* PARENT */) {\r\n                            p += \"../\";\r\n                        }\r\n                        else if (flags & 8 /* ROOT */) {\r\n                            p += \"/\";\r\n                        }\r\n                        else {\r\n                            p += component.content(getStr);\r\n                            if (!(flags & 1 /* CONTINUE */)) {\r\n                                p += '/';\r\n                            }\r\n                        }\r\n                    }\r\n                    if (!entry.continueFlag()) {\r\n                        // We are done with this link.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (p.length > 1 && p[p.length - 1] === '/') {\r\n                // Trim trailing '/'.\r\n                return p.slice(0, p.length - 1);\r\n            }\r\n            else {\r\n                return p;\r\n            }\r\n        }\r\n        getFile(isoData) {\r\n            if (this.isDirectory(isoData)) {\r\n                throw new Error(`Tried to get a File from a directory.`);\r\n            }\r\n            if (this._fileOrDir === null) {\r\n                this._fileOrDir = isoData.slice(this.lba(), this.lba() + this.dataLength());\r\n            }\r\n            return this._fileOrDir;\r\n        }\r\n        getDirectory(isoData) {\r\n            if (!this.isDirectory(isoData)) {\r\n                throw new Error(`Tried to get a Directory from a file.`);\r\n            }\r\n            if (this._fileOrDir === null) {\r\n                this._fileOrDir = this._constructDirectory(isoData);\r\n            }\r\n            return this._fileOrDir;\r\n        }\r\n        getSUEntries(isoData) {\r\n            if (!this._suEntries) {\r\n                this._constructSUEntries(isoData);\r\n            }\r\n            return this._suEntries;\r\n        }\r\n        _rockRidgeFilename(isoData) {\r\n            const nmEntries = this.getSUEntries(isoData).filter((e) => e instanceof NMEntry);\r\n            if (nmEntries.length === 0 || nmEntries[0].flags() & (2 /* CURRENT */ | 4 /* PARENT */)) {\r\n                return null;\r\n            }\r\n            let str = '';\r\n            const getString = this._getGetString();\r\n            for (const e of nmEntries) {\r\n                str += e.name(getString);\r\n                if (!(e.flags() & 1 /* CONTINUE */)) {\r\n                    break;\r\n                }\r\n            }\r\n            return str;\r\n        }\r\n        _constructSUEntries(isoData) {\r\n            let i = 33 + this._data[32];\r\n            if (i % 2 === 1) {\r\n                // Skip padding field.\r\n                i++;\r\n            }\r\n            i += this._rockRidgeOffset;\r\n            this._suEntries = constructSystemUseEntries(this._data, i, this.length(), isoData);\r\n        }\r\n        /**\r\n         * !!ONLY VALID ON FIRST ENTRY OF ROOT DIRECTORY!!\r\n         * Returns -1 if rock ridge is not enabled. Otherwise, returns the offset\r\n         * at which system use fields begin.\r\n         */\r\n        _getRockRidgeOffset(isoData) {\r\n            // In the worst case, we get some garbage SU entries.\r\n            // Fudge offset to 0 before proceeding.\r\n            this._rockRidgeOffset = 0;\r\n            const suEntries = this.getSUEntries(isoData);\r\n            if (suEntries.length > 0) {\r\n                const spEntry = suEntries[0];\r\n                if (spEntry instanceof SPEntry && spEntry.checkBytesPass()) {\r\n                    // SUSP is in use.\r\n                    for (let i = 1; i < suEntries.length; i++) {\r\n                        const entry = suEntries[i];\r\n                        if (entry instanceof RREntry || (entry instanceof EREntry && entry.extensionIdentifier() === rockRidgeIdentifier)) {\r\n                            // Rock Ridge is in use!\r\n                            return spEntry.bytesSkipped();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // Failed.\r\n            this._rockRidgeOffset = -1;\r\n            return -1;\r\n        }\r\n    }\r\n\r\n\r\n    return DirectoryRecord;\r\n});"]}