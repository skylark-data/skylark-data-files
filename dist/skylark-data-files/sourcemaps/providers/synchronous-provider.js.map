{"version":3,"sources":["providers/synchronous-provider.js"],"names":["define","Buffer","paths","files","ErrorCodes","FileError","ActionType","FileFlag","utils","BaseProvider","fail","providers","SynchronousProvider","[object Object]","oldPath","newPath","cb","this","renameSync","e","p","isLstat","statSync","flags","mode","openSync","unlinkSync","rmdirSync","mkdirSync","readdirSync","isLchmod","chmodSync","isLchown","uid","gid","chownSync","atime","mtime","utimesSync","srcpath","dstpath","linkSync","type","symlinkSync","readlinkSync"],"mappings":";;;;;;;AAAAA,QACI,8BACA,sBACA,WACA,iBACA,gBACA,iBACA,eACA,WACA,mBACD,SAAUC,EAAOC,EAAOC,EAAMC,EAAYC,EAAWC,EAAYC,EAAUC,EAAMC,GAChF,aAEA,MAAMC,KAAEA,GAASF,EA8HjB,OAAOL,EAAMQ,UAAUC,kCAxHWH,EAC9BI,gBACI,OAAO,EAEXA,OAAOC,EAASC,EAASC,GACrB,IACIC,KAAKC,WAAWJ,EAASC,GACzBC,IAEJ,MAAOG,GACHH,EAAGG,IAGXN,KAAKO,EAAGC,EAASL,GACb,IACIA,EAAG,KAAMC,KAAKK,SAASF,EAAGC,IAE9B,MAAOF,GACHH,EAAGG,IAGXN,KAAKO,EAAGG,EAAOC,EAAMR,GACjB,IACIA,EAAG,KAAMC,KAAKQ,SAASL,EAAGG,EAAOC,IAErC,MAAOL,GACHH,EAAGG,IAGXN,OAAOO,EAAGJ,GACN,IACIC,KAAKS,WAAWN,GAChBJ,IAEJ,MAAOG,GACHH,EAAGG,IAGXN,MAAMO,EAAGJ,GACL,IACIC,KAAKU,UAAUP,GACfJ,IAEJ,MAAOG,GACHH,EAAGG,IAGXN,MAAMO,EAAGI,EAAMR,GACX,IACIC,KAAKW,UAAUR,EAAGI,GAClBR,IAEJ,MAAOG,GACHH,EAAGG,IAGXN,QAAQO,EAAGJ,GACP,IACIA,EAAG,KAAMC,KAAKY,YAAYT,IAE9B,MAAOD,GACHH,EAAGG,IAGXN,MAAMO,EAAGU,EAAUN,EAAMR,GACrB,IACIC,KAAKc,UAAUX,EAAGU,EAAUN,GAC5BR,IAEJ,MAAOG,GACHH,EAAGG,IAGXN,MAAMO,EAAGY,EAAUC,EAAKC,EAAKlB,GACzB,IACIC,KAAKkB,UAAUf,EAAGY,EAAUC,EAAKC,GACjClB,IAEJ,MAAOG,GACHH,EAAGG,IAGXN,OAAOO,EAAGgB,EAAOC,EAAOrB,GACpB,IACIC,KAAKqB,WAAWlB,EAAGgB,EAAOC,GAC1BrB,IAEJ,MAAOG,GACHH,EAAGG,IAGXN,KAAK0B,EAASC,EAASxB,GACnB,IACIC,KAAKwB,SAASF,EAASC,GACvBxB,IAEJ,MAAOG,GACHH,EAAGG,IAGXN,QAAQ0B,EAASC,EAASE,EAAM1B,GAC5B,IACIC,KAAK0B,YAAYJ,EAASC,EAASE,GACnC1B,IAEJ,MAAOG,GACHH,EAAGG,IAGXN,SAASO,EAAGJ,GACR,IACIA,EAAG,KAAMC,KAAK2B,aAAaxB,IAE/B,MAAOD,GACHH,EAAGG","file":"../../providers/synchronous-provider.js","sourcesContent":["define([\r\n    \"skylark-langx-binary/buffer\",\r\n    \"skylark-langx-paths\",\r\n    \"../files\",\r\n    \"../error-codes\",\r\n    '../file-error',\r\n    '../action-type',\r\n    '../file-flag',\r\n    '../utils',\r\n    \"./base-provider\"\r\n], function (Buffer,paths, files,ErrorCodes, FileError, ActionType, FileFlag, utils,BaseProvider) {\r\n    'use strict';\r\n\r\n    const { fail } = utils;\r\n\r\n    /**\r\n     * Implements the asynchronous API in terms of the synchronous API.\r\n     * @class SynchronousProvider\r\n     */\r\n    class SynchronousProvider extends BaseProvider {\r\n        supportsSynch() {\r\n            return true;\r\n        }\r\n        rename(oldPath, newPath, cb) {\r\n            try {\r\n                this.renameSync(oldPath, newPath);\r\n                cb();\r\n            }\r\n            catch (e) {\r\n                cb(e);\r\n            }\r\n        }\r\n        stat(p, isLstat, cb) {\r\n            try {\r\n                cb(null, this.statSync(p, isLstat));\r\n            }\r\n            catch (e) {\r\n                cb(e);\r\n            }\r\n        }\r\n        open(p, flags, mode, cb) {\r\n            try {\r\n                cb(null, this.openSync(p, flags, mode));\r\n            }\r\n            catch (e) {\r\n                cb(e);\r\n            }\r\n        }\r\n        unlink(p, cb) {\r\n            try {\r\n                this.unlinkSync(p);\r\n                cb();\r\n            }\r\n            catch (e) {\r\n                cb(e);\r\n            }\r\n        }\r\n        rmdir(p, cb) {\r\n            try {\r\n                this.rmdirSync(p);\r\n                cb();\r\n            }\r\n            catch (e) {\r\n                cb(e);\r\n            }\r\n        }\r\n        mkdir(p, mode, cb) {\r\n            try {\r\n                this.mkdirSync(p, mode);\r\n                cb();\r\n            }\r\n            catch (e) {\r\n                cb(e);\r\n            }\r\n        }\r\n        readdir(p, cb) {\r\n            try {\r\n                cb(null, this.readdirSync(p));\r\n            }\r\n            catch (e) {\r\n                cb(e);\r\n            }\r\n        }\r\n        chmod(p, isLchmod, mode, cb) {\r\n            try {\r\n                this.chmodSync(p, isLchmod, mode);\r\n                cb();\r\n            }\r\n            catch (e) {\r\n                cb(e);\r\n            }\r\n        }\r\n        chown(p, isLchown, uid, gid, cb) {\r\n            try {\r\n                this.chownSync(p, isLchown, uid, gid);\r\n                cb();\r\n            }\r\n            catch (e) {\r\n                cb(e);\r\n            }\r\n        }\r\n        utimes(p, atime, mtime, cb) {\r\n            try {\r\n                this.utimesSync(p, atime, mtime);\r\n                cb();\r\n            }\r\n            catch (e) {\r\n                cb(e);\r\n            }\r\n        }\r\n        link(srcpath, dstpath, cb) {\r\n            try {\r\n                this.linkSync(srcpath, dstpath);\r\n                cb();\r\n            }\r\n            catch (e) {\r\n                cb(e);\r\n            }\r\n        }\r\n        symlink(srcpath, dstpath, type, cb) {\r\n            try {\r\n                this.symlinkSync(srcpath, dstpath, type);\r\n                cb();\r\n            }\r\n            catch (e) {\r\n                cb(e);\r\n            }\r\n        }\r\n        readlink(p, cb) {\r\n            try {\r\n                cb(null, this.readlinkSync(p));\r\n            }\r\n            catch (e) {\r\n                cb(e);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return files.providers.SynchronousProvider =  SynchronousProvider;\r\n});"]}