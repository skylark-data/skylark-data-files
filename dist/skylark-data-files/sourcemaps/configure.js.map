{"version":3,"sources":["configure.js"],"names":["define","files","FileSystem","ErrorCodes","FileError","registry","fs","configure","config","cb","rootfs","getFileSystem","fsName","EPERM","options","waitCount","called","finish","fsc","get","Create","finishedIterating","props","Object","keys","filter","k","forEach","p","d","e","provider","initialize"],"mappings":";;;;;;;AAAAA,QACI,UACA,gBACA,gBACA,eACA,wBACD,SAASC,EAAOC,EAAYC,EAAWC,EAAUC,GAChD,aAEA,IAAIC,EAAKL,EAAMK,GAAK,IAAIJ,EAiFxB,OAAOD,EAAMM,UArEb,SAAmBC,EAAQC,GAP3B,IAAoBC,GAuBpB,SAASC,EAAcH,EAAQC,GAC3B,MAAMG,EAASJ,EAAW,GAC1B,IAAKI,EACD,OAAOH,EAAG,IAAIL,EAAUD,EAAWU,MAAO,mDAE9C,MAAMC,EAAUN,EAAgB,QAChC,IAAIO,EAAY,EACZC,GAAS,EACb,SAASC,IACL,IAAKD,EAAQ,CACTA,GAAS,EACT,MAAME,EAAMb,EAASc,IAAIP,GACpBM,EAIDA,EAAIE,OAAON,EAASL,GAHpBA,EAAG,IAAIL,EAAUD,EAAWU,qBAAsBD,sCAO9D,GAAgB,OAAZE,GAAyC,iBAAd,EAAwB,CACnD,IAAIO,GAAoB,EACxB,MAAMC,EAAQC,OAAOC,KAAKV,GAASW,OAAQC,GAAY,OAANA,GAEjDJ,EAAMK,QAASC,IACX,MAAMC,EAAIf,EAAQc,GACR,OAANC,GAA6B,iBAAR,GAAoBA,EAAM,KAC/Cd,IACAJ,EAAckB,EAAG,SAAUC,EAAGxB,GAE1B,GADAS,IACIe,EAAG,CACH,GAAId,EACA,OAEJA,GAAS,EACTP,EAAGqB,QAGHhB,EAAQc,GAAKtB,EACK,IAAdS,GAAmBM,GACnBJ,SAMpBI,GAAoB,EAEN,IAAdN,GACAE,IAhEJN,CAAcH,EAAQ,CAACsB,EAAGC,KAClBA,GATQrB,EAUGqB,EATZzB,EAAG0B,WAAWtB,GAUbD,EAAG,KAAKH,IAGRG,EAAGqB","file":"../configure.js","sourcesContent":["define([\r\n    \"./files\",\r\n    './file-system',\r\n    \"./error-codes\",\r\n    \"./file-error\",\r\n    './providers/registry',\r\n], function(files, FileSystem, ErrorCodes,FileError,registry) {\r\n    'use strict';\r\n\r\n    var fs = files.fs = new FileSystem();\r\n\r\n    /**\r\n     * Initializes BrowserFS with the given root file system.\r\n     */\r\n    function initialize(rootfs) {\r\n        return fs.initialize(rootfs);\r\n    }\r\n    /**\r\n     * Creates a file system with the given configuration, and initializes BrowserFS with it.\r\n     * See the FileSystemConfiguration type for more info on the configuration object.\r\n     */\r\n    function configure(config, cb) {\r\n        getFileSystem(config, (e, provider) => {\r\n            if (provider) {\r\n                initialize(provider);\r\n                cb(null,fs);\r\n            }\r\n            else {\r\n                cb(e);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve a file system with the given configuration.\r\n     * @param config A FileSystemConfiguration object. See FileSystemConfiguration for details.\r\n     * @param cb Called when the file system is constructed, or when an error occurs.\r\n     */\r\n    function getFileSystem(config, cb) {\r\n        const fsName = config['fs'];\r\n        if (!fsName) {\r\n            return cb(new FileError(ErrorCodes.EPERM, 'Missing \"fs\" property on configuration object.'));\r\n        }\r\n        const options = config['options'];\r\n        let waitCount = 0;\r\n        let called = false;\r\n        function finish() {\r\n            if (!called) {\r\n                called = true;\r\n                const fsc = registry.get(fsName);\r\n                if (!fsc) {\r\n                    cb(new FileError(ErrorCodes.EPERM, `File system ${fsName} is not available in BrowserFS.`));\r\n                }\r\n                else {\r\n                    fsc.Create(options, cb);\r\n                }\r\n            }\r\n        }\r\n        if (options !== null && typeof (options) === \"object\") {\r\n            let finishedIterating = false;\r\n            const props = Object.keys(options).filter((k) => k !== 'fs');\r\n            // Check recursively if other fields have 'fs' properties.\r\n            props.forEach((p) => {\r\n                const d = options[p];\r\n                if (d !== null && typeof (d) === \"object\" && d['fs']) {\r\n                    waitCount++;\r\n                    getFileSystem(d, function (e, fs) {\r\n                        waitCount--;\r\n                        if (e) {\r\n                            if (called) {\r\n                                return;\r\n                            }\r\n                            called = true;\r\n                            cb(e);\r\n                        }\r\n                        else {\r\n                            options[p] = fs;\r\n                            if (waitCount === 0 && finishedIterating) {\r\n                                finish();\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n            finishedIterating = true;\r\n        }\r\n        if (waitCount === 0) {\r\n            finish();\r\n        }\r\n    }\r\n\r\n    return files.configure = configure;\r\n});"]}