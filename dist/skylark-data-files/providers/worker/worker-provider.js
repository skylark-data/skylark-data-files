/**
 * skylark-data-files - The skylark file system library
 * @author Hudaokeji Co.,Ltd
 * @version v0.9.0
 * @link www.skylarkjs.org
 * @license MIT
 */
define(["skylark-langx-binary/buffer","skylark-langx-paths","../base-provider","../../stats","../../file-type","../../file-error","../../error-codes","../../file-flag","../../action-type","../../base-file","../../utils","../preload-file","./callback-argument-converter","./worker-file"],function(e,t,r,s,o,a,i,n,c,l,p,u,f,g){const{buffer2ArrayBuffer:h,arrayBuffer2Buffer:m,emptyBuffer:d}=p;class R extends r{constructor(e){super(),this._callbackConverter=new f,this._isInitialized=!1,this._isReadOnly=!1,this._supportLinks=!1,this._supportProps=!1,this._worker=e,this._worker.addEventListener("message",e=>{const t=e.data;if(isAPIResponse(t)){let e;const r=t.args,s=new Array(r.length);for(e=0;e<s.length;e++)s[e]=this._argRemote2Local(r[e]);this._callbackConverter.toLocalArg(t.cbId).apply(null,s)}})}static Create(e,t){const r=new R(e.worker);r._initialize(()=>{t(null,r)})}static isAvailable(){return"undefined"!=typeof importScripts||"undefined"!=typeof Worker}static attachRemoteListener(t){const r=new FileDescriptorArgumentConverter;function o(t,o,i){switch(typeof t){case"object":t instanceof s?i(null,statsLocal2Remote(t)):t instanceof a?i(null,FileErrorLocal2Remote(t)):t instanceof l?i(null,r.toRemoteArg(t,o[0],o[1],i)):t instanceof n?i(null,fileFlagLocal2Remote(t)):t instanceof e?i(null,bufferLocal2Remote(t)):t instanceof Error?i(null,errorLocal2Remote(t)):i(null,t);break;default:i(null,t)}}function i(e,r){if(!e)return e;switch(typeof e){case"object":if("number"!=typeof e.type)return e;{const s=e;switch(s.type){case SpecialArgType.CB:const a=e.id;return function(){let e;const s=new Array(arguments.length);let i,n=arguments.length;for(e=0;e<arguments.length;e++)((e,c)=>{o(c,r,(r,o)=>{s[e]=o,r?n>0&&(n=-1,i={browserfsMessage:!0,cbId:a,args:[FileErrorLocal2Remote(r)]},t.postMessage(i)):0==--n&&(i={browserfsMessage:!0,cbId:a,args:s},t.postMessage(i))})})(e,arguments[e]);0===arguments.length&&(i={browserfsMessage:!0,cbId:a,args:s},t.postMessage(i))};case SpecialArgType.API_ERROR:return FileErrorRemote2Local(s);case SpecialArgType.STATS:return statsRemote2Local(s);case SpecialArgType.FILEFLAG:return fileFlagRemote2Local(s);case SpecialArgType.BUFFER:return bufferRemote2Local(s);case SpecialArgType.ERROR:return errorRemote2Local(s);default:return e}}default:return e}}t.addEventListener("message",e=>{const s=e.data;if(isAPIRequest(s)){const e=s.args,o=new Array(e.length);switch(s.method){case"close":case"sync":(()=>{const o=e[1];r.applyFdAPIRequest(s,e=>{const r={browserfsMessage:!0,cbId:o.id,args:e?[FileErrorLocal2Remote(e)]:[]};t.postMessage(r)})})();break;case"probe":(()=>{const r=fs.getRootFS(),s=e[1],o={type:SpecialArgType.PROBE,isReadOnly:r.isReadOnly(),supportsLinks:r.supportsLinks(),supportsProps:r.supportsProps()},a={browserfsMessage:!0,cbId:s.id,args:[o]};t.postMessage(a)})();break;default:for(let t=0;t<e.length;t++)o[t]=i(e[t],o);const a=fs.getRootFS();a[s.method].apply(a,o)}}})}getName(){return R.Name}isReadOnly(){return this._isReadOnly}supportsSynch(){return!1}supportsLinks(){return this._supportLinks}supportsProps(){return this._supportProps}rename(e,t,r){this._rpc("rename",arguments)}stat(e,t,r){this._rpc("stat",arguments)}open(e,t,r,s){this._rpc("open",arguments)}unlink(e,t){this._rpc("unlink",arguments)}rmdir(e,t){this._rpc("rmdir",arguments)}mkdir(e,t,r){this._rpc("mkdir",arguments)}readdir(e,t){this._rpc("readdir",arguments)}exists(e,t){this._rpc("exists",arguments)}realpath(e,t,r){this._rpc("realpath",arguments)}truncate(e,t,r){this._rpc("truncate",arguments)}readFile(e,t,r,s){this._rpc("readFile",arguments)}writeFile(e,t,r,s,o,a){this._rpc("writeFile",arguments)}appendFile(e,t,r,s,o,a){this._rpc("appendFile",arguments)}chmod(e,t,r,s){this._rpc("chmod",arguments)}chown(e,t,r,s,o){this._rpc("chown",arguments)}utimes(e,t,r,s){this._rpc("utimes",arguments)}link(e,t,r){this._rpc("link",arguments)}symlink(e,t,r,s){this._rpc("symlink",arguments)}readlink(e,t){this._rpc("readlink",arguments)}syncClose(e,t,r){this._worker.postMessage({browserfsMessage:!0,method:e,args:[t.toRemoteArg(),this._callbackConverter.toRemoteArg(r)]})}_initialize(e){if(this._isInitialized)e();else{const t={browserfsMessage:!0,method:"probe",args:[this._argLocal2Remote(d()),this._callbackConverter.toRemoteArg(t=>{this._isInitialized=!0,this._isReadOnly=t.isReadOnly,this._supportLinks=t.supportsLinks,this._supportProps=t.supportsProps,e()})]};this._worker.postMessage(t)}}_argRemote2Local(e){if(!e)return e;switch(typeof e){case"object":if("number"!=typeof e.type)return e;{const t=e;switch(t.type){case SpecialArgType.API_ERROR:return misc.FileErrorRemote2Local(t);case SpecialArgType.FD:const r=t;return new g(this,r.path,n.getFileFlag(r.flag),s.fromBuffer(transferrableObjectToBuffer(r.stat)),r.id,transferrableObjectToBuffer(r.data));case SpecialArgType.STATS:return misc.statsRemote2Local(t);case SpecialArgType.FILEFLAG:return misc.fileFlagRemote2Local(t);case SpecialArgType.BUFFER:return misc.bufferRemote2Local(t);case SpecialArgType.ERROR:return misc.errorRemote2Local(t);default:return e}}default:return e}}_rpc(e,t){const r=new Array(t.length);for(let e=0;e<t.length;e++)r[e]=this._argLocal2Remote(t[e]);const s={browserfsMessage:!0,method:e,args:r};this._worker.postMessage(s)}_argLocal2Remote(t){if(!t)return t;switch(typeof t){case"object":return t instanceof s?statsLocal2Remote(t):t instanceof a?FileErrorLocal2Remote(t):t instanceof g?t.toRemoteArg():t instanceof n?fileFlagLocal2Remote(t):t instanceof e?bufferLocal2Remote(t):t instanceof Error?errorLocal2Remote(t):"Unknown argument";case"function":return this._callbackConverter.toRemoteArg(t);default:return t}}}return R.Name="WorkerProvider",R.Options={worker:{type:"object",description:"The target worker that you want to connect to, or the current worker if in a worker context.",validator:function(e,t){e.postMessage?t():t(new a(i.EINVAL,"option must be a Web Worker instance."))}}},R});
//# sourceMappingURL=../../sourcemaps/providers/worker/worker-provider.js.map
