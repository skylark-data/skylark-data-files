/**
 * skylark-data-files - The skylark file system library
 * @author Hudaokeji Co.,Ltd
 * @version v0.9.0
 * @link www.skylarkjs.org
 * @license MIT
 */
define(["skylark-langx-paths","../../files","../registry","../base-provider","./in-memory-provider","../../file-error","../../error-codes","../../utils"],function(t,r,s,n,e,i,o,a){"use strict";const{mkdirpSync:h}=a;class c extends n{constructor(t){super(),this.mountList=[],this.mntMap={},this.rootFs=t}static Create(t,r){e.Create({},(s,n)=>{if(n){const e=new c(n);try{Object.keys(t).forEach(r=>{e.mount(r,t[r])})}catch(s){return r(s)}r(null,e)}else r(s)})}static isAvailable(){return!0}mount(r,s){if("/"!==r[0]&&(r=`/${r}`),r=t.resolve(r),this.mntMap[r])throw new i(o.EINVAL,"Mount point "+r+" is already taken.");h(r,511,this.rootFs),this.mntMap[r]=s,this.mountList.push(r),this.mountList=this.mountList.sort((t,r)=>r.length-t.length)}umount(r){if("/"!==r[0]&&(r=`/${r}`),r=t.resolve(r),!this.mntMap[r])throw new i(o.EINVAL,"Mount point "+r+" is already unmounted.");for(delete this.mntMap[r],this.mountList.splice(this.mountList.indexOf(r),1);"/"!==r&&0===this.rootFs.readdirSync(r).length;)this.rootFs.rmdirSync(r),r=t.dirname(r)}_getFs(t){const r=this.mountList,s=r.length;for(let n=0;n<s;n++){const s=r[n];if(s.length<=t.length&&0===t.indexOf(s))return""===(t=t.substr(s.length>1?s.length:0))&&(t="/"),{fs:this.mntMap[s],path:t,mountPoint:s}}return{fs:this.rootFs,path:t,mountPoint:"/"}}getName(){return c.Name}diskSpace(t,r){r(0,0)}isReadOnly(){return!1}supportsLinks(){return!1}supportsProps(){return!1}supportsSynch(){return!0}standardizeError(t,r,s){const n=t.message.indexOf(r);return-1!==n&&(t.message=t.message.substr(0,n)+s+t.message.substr(n+r.length),t.path=s),t}rename(t,r,s){const n=this._getFs(t),e=this._getFs(r);return n.fs===e.fs?n.fs.rename(n.path,e.path,i=>{i&&this.standardizeError(this.standardizeError(i,n.path,t),e.path,r),s(i)}):fs.readFile(t,function(n,e){if(n)return s(n);fs.writeFile(r,e,function(r){if(r)return s(r);fs.unlink(t,s)})})}renameSync(t,r){const s=this._getFs(t),n=this._getFs(r);if(s.fs===n.fs)try{return s.fs.renameSync(s.path,n.path)}catch(e){throw this.standardizeError(this.standardizeError(e,s.path,t),n.path,r),e}const e=fs.readFileSync(t);return fs.writeFileSync(r,e),fs.unlinkSync(t)}readdirSync(t){const r=this._getFs(t);let s=null;if(r.fs!==this.rootFs)try{s=this.rootFs.readdirSync(t)}catch(t){}try{const n=r.fs.readdirSync(r.path);return null===s?n:n.concat(s.filter(t=>-1===n.indexOf(t)))}catch(n){if(null===s)throw this.standardizeError(n,r.path,t);return s}}readdir(t,r){const s=this._getFs(t);s.fs.readdir(s.path,(n,e)=>{if(s.fs!==this.rootFs)try{const i=this.rootFs.readdirSync(t);e=e?e.concat(i.filter(t=>-1===e.indexOf(t))):i}catch(e){if(n)return r(this.standardizeError(n,s.path,t))}else if(n)return r(this.standardizeError(n,s.path,t));r(null,e)})}realpathSync(r,s){const n=this._getFs(r);try{const s=n.fs.realpathSync(n.path,{});return t.resolve(t.join(n.mountPoint,s))}catch(t){throw this.standardizeError(t,n.path,r)}}realpath(r,s,n){const e=this._getFs(r);e.fs.realpath(e.path,{},(s,i)=>{s?n(this.standardizeError(s,e.path,r)):n(null,t.resolve(t.join(e.mountPoint,i)))})}rmdirSync(t){const r=this._getFs(t);if(this._containsMountPt(t))throw i.ENOTEMPTY(t);try{r.fs.rmdirSync(r.path)}catch(s){throw this.standardizeError(s,r.path,t)}}rmdir(t,r){const s=this._getFs(t);this._containsMountPt(t)?r(i.ENOTEMPTY(t)):s.fs.rmdir(s.path,n=>{r(n?this.standardizeError(n,s.path,t):null)})}_containsMountPt(t){const r=this.mountList,s=r.length;for(let n=0;n<s;n++){const s=r[n];if(s.length>=t.length&&s.slice(0,t.length)===t)return!0}return!1}}function u(t,r,s){return r?function(...r){const s=r[0],n=this._getFs(s);r[0]=n.path;try{return n.fs[t].apply(n.fs,r)}catch(t){throw this.standardizeError(t,n.path,s),t}}:function(...r){const s=r[0],n=this._getFs(s);if(r[0]=n.path,"function"==typeof r[r.length-1]){const t=r[r.length-1];r[r.length-1]=((...r)=>{r.length>0&&r[0]instanceof i&&this.standardizeError(r[0],n.path,s),t.apply(null,r)})}return n.fs[t].apply(n.fs,r)}}c.Name="MountableProvider",c.Options={};const l=[["exists","unlink","readlink"],["stat","mkdir","truncate"],["open","readFile","chmod","utimes"],["chown"],["writeFile","appendFile"]];for(let t=0;t<l.length;t++){const r=l[t];for(const t of r)c.prototype[t]=u(t,!1),c.prototype[t+"Sync"]=u(t+"Sync",!0)}return r.providers.MountableProvider=c});
//# sourceMappingURL=../../sourcemaps/providers/inmemory/mountable-provider.js.map
