/**
 * skylark-data-files - The skylark file system library
 * @author Hudaokeji Co.,Ltd
 * @version v0.9.0
 * @link www.skylarkjs.org
 * @license MIT
 */
define(["skylark-langx-string/generate-uuid","skylark-langx-binary/buffer","skylark-langx-paths/path","../files","../error-codes","../file-error","./base-provider","./synchronous-provider","../utils"],function(t,e,i,r,n,o,s,a,d,c,h){"use strict";const{emptyBuffer:f}=h;return class extends o{static isAvailable(){return!0}constructor(t){super(),this.store=t.store,this.makeRootDirectory()}getName(){return this.store.name()}isReadOnly(){return!1}supportsSymlinks(){return!1}supportsProps(){return!1}supportsSynch(){return!0}empty(){this.store.clear(),this.makeRootDirectory()}renameSync(t,r){const n=this.store.beginTransaction("readwrite"),o=i.dirname(t),d=i.basename(t),c=i.dirname(r),h=i.basename(r),f=this.findINode(n,o),m=this.getDirListing(n,o,f);if(!m[d])throw a.ENOENT(t);const N=m[d];if(delete m[d],0===(c+"/").indexOf(t+"/"))throw new a(s.EBUSY,o);let g,y;if(c===o?(g=f,y=m):(g=this.findINode(n,c),y=this.getDirListing(n,c,g)),y[h]){const t=this.getINode(n,r,y[h]);if(!t.isFile())throw a.EPERM(r);try{n.del(t.id),n.del(y[h])}catch(t){throw n.abort(),t}}y[h]=N;try{n.put(f.id,e.from(JSON.stringify(m)),!0),n.put(g.id,e.from(JSON.stringify(y)),!0)}catch(t){throw n.abort(),t}n.commit()}statSync(t,e){return this.findINode(this.store.beginTransaction("readonly"),t).toStats()}createFileSync(t,e,i){const r=this.store.beginTransaction("readwrite"),n=f(),o=this.commitNewFile(r,t,d.FILE,i,n);return new SyncKeyValueFile(this,t,e,o.toStats(),n)}openFileSync(t,e){const i=this.store.beginTransaction("readonly"),r=this.findINode(i,t),n=i.get(r.id);if(void 0===n)throw a.ENOENT(t);return new SyncKeyValueFile(this,t,e,r.toStats(),n)}unlinkSync(t){this.removeEntry(t,!1)}rmdirSync(t){if(this.readdirSync(t).length>0)throw a.ENOTEMPTY(t);this.removeEntry(t,!0)}mkdirSync(t,i){const r=this.store.beginTransaction("readwrite"),n=e.from("{}");this.commitNewFile(r,t,d.DIRECTORY,i,n)}readdirSync(t){const e=this.store.beginTransaction("readonly");return Object.keys(this.getDirListing(e,t,this.findINode(e,t)))}_syncSync(t,e,r){const n=this.store.beginTransaction("readwrite"),o=this._findINode(n,i.dirname(t),i.basename(t)),s=this.getINode(n,t,o),a=s.update(r);try{n.put(s.id,e,!0),a&&n.put(o,s.toBuffer(),!0)}catch(t){throw n.abort(),t}n.commit()}makeRootDirectory(){const e=this.store.beginTransaction("readwrite");if(void 0===e.get(ROOT_NODE_ID)){const i=(new Date).getTime(),r=new c(t(),4096,511|d.DIRECTORY,i,i,i);e.put(r.id,getEmptyDirNode(),!1),e.put(ROOT_NODE_ID,r.toBuffer(),!1),e.commit()}}_findINode(t,e,r){const n=n=>{const o=this.getDirListing(t,e,n);if(o[r])return o[r];throw a.ENOENT(i.resolve(e,r))};return"/"===e?""===r?ROOT_NODE_ID:n(this.getINode(t,e,ROOT_NODE_ID)):n(this.getINode(t,e+i.sep+r,this._findINode(t,i.dirname(e),i.basename(e))))}findINode(t,e){return this.getINode(t,e,this._findINode(t,i.dirname(e),i.basename(e)))}getINode(t,e,i){const r=t.get(i);if(void 0===r)throw a.ENOENT(e);return c.fromBuffer(r)}getDirListing(t,e,i){if(!i.isDirectory())throw a.ENOTDIR(e);const r=t.get(i.id);if(void 0===r)throw a.ENOENT(e);return JSON.parse(r.toString())}addNewNode(e,i){let r;for(;;)try{return r=t(),e.put(r,i,!1),r}catch(t){}throw new a(s.EIO,"Unable to commit data to key-value store.")}commitNewFile(t,r,n,o,s){const d=i.dirname(r),h=i.basename(r),f=this.findINode(t,d),m=this.getDirListing(t,d,f),N=(new Date).getTime();if("/"===r)throw a.EEXIST(r);if(m[h])throw a.EEXIST(r);let g;try{const i=this.addNewNode(t,s);g=new c(i,s.length,o|n,N,N,N);const r=this.addNewNode(t,g.toBuffer());m[h]=r,t.put(f.id,e.from(JSON.stringify(m)),!0)}catch(e){throw t.abort(),e}return t.commit(),g}removeEntry(t,r){const n=this.store.beginTransaction("readwrite"),o=i.dirname(t),s=this.findINode(n,o),d=this.getDirListing(n,o,s),c=i.basename(t);if(!d[c])throw a.ENOENT(t);const h=d[c];delete d[c];const f=this.getINode(n,t,h);if(!r&&f.isDirectory())throw a.EISDIR(t);if(r&&!f.isDirectory())throw a.ENOTDIR(t);try{n.del(f.id),n.del(h),n.put(s.id,e.from(JSON.stringify(d)),!0)}catch(t){throw n.abort(),t}n.commit()}}});
//# sourceMappingURL=../sourcemaps/providers/sync-key-value-provider.js.map
