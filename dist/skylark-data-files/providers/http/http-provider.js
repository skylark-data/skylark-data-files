/**
 * skylark-data-files - The skylark file system library
 * @author Hudaokeji Co.,Ltd
 * @version v0.9.0
 * @link www.skylarkjs.org
 * @license MIT
 */
define(["skylark-langx-async","skylark-langx-paths","../../files","../registry","../../no-sync-file","../base-provider","../../error-codes","../../file-error","../../action-type","../../stats","../../file-type","../../utils","./xhr","./fetch","../../inodes/dir-inode","../../inodes/file-index","../../inodes/file-inode"],function(e,t,n,i,r,s,l,a,o,c,h,u,f,d,y,p,S){"use strict";const{copyingSlice:I}=u,{xhrIsAvailable:g,asyncDownloadFile:E,syncDownloadFile:_,getFileSizeAsync:F,getFileSizeSync:x}=f,{fetchIsAvailable:T,fetchFileAsync:w,fetchFileSizeAsync:N}=d,A=S.isFileInode,D=y.isDirInode;function q(){throw new a(l.ENOTSUP,"Synchronous HTTP download methods are not available in this environment.")}class b extends s{constructor(e,t="",n=!1){super(),t.length>0&&"/"!==t.charAt(t.length-1)&&(t+="/"),this.prefixUrl=t,this._index=p.fromListing(e),!T||n&&g?(this._requestFileAsyncInternal=E,this._requestFileSizeAsyncInternal=F):(this._requestFileAsyncInternal=w,this._requestFileSizeAsyncInternal=N),g?(this._requestFileSyncInternal=_,this._requestFileSizeSyncInternal=x):(this._requestFileSyncInternal=q,this._requestFileSizeSyncInternal=q)}static Create(e,t){void 0===e.index&&(e.index="index.json"),"string"==typeof e.index?E(e.index,"json",(n,i)=>{n?t(n):t(null,new b(i,e.baseUrl))}):t(null,new b(e.index,e.baseUrl))}static isAvailable(){return g||T}empty(){this._index.fileIterator(function(e){e.fileData=null})}getName(){return b.Name}diskSpace(e,t){t(0,0)}isReadOnly(){return!0}supportsLinks(){return!1}supportsProps(){return!1}supportsSynch(){return g}preloadFile(e,t){const n=this._index.getInode(e);if(!A(n))throw a.EISDIR(e);{if(null===n)throw a.ENOENT(e);const i=n.getData();i.size=t.length,i.fileData=t}}stat(e,t,n){const i=this._index.getInode(e);if(null===i)return n(a.ENOENT(e));let r;A(i)?(r=i.getData()).size<0?this._requestFileSizeAsync(e,function(e,t){if(e)return n(e);r.size=t,n(null,c.clone(r))}):n(null,c.clone(r)):D(i)?(r=i.getStats(),n(null,r)):n(a.FileError(l.EINVAL,e))}statSync(e,t){const n=this._index.getInode(e);if(null===n)throw a.ENOENT(e);let i;if(A(n))(i=n.getData()).size<0&&(i.size=this._requestFileSizeSync(e));else{if(!D(n))throw a.FileError(l.EINVAL,e);i=n.getStats()}return i}open(e,t,n,i){if(t.isWriteable())return i(new a(l.EPERM,e));const s=this,h=this._index.getInode(e);if(null===h)return i(a.ENOENT(e));if(!A(h))return i(a.EISDIR(e));{const n=h.getData();switch(t.pathExistsAction()){case o.THROW_EXCEPTION:case o.TRUNCATE_FILE:return i(a.EEXIST(e));case o.NOP:if(n.fileData)return i(null,new r(s,e,t,c.clone(n),n.fileData));this._requestFileAsync(e,"buffer",function(l,a){return l?i(l):(n.size=a.length,n.fileData=a,i(null,new r(s,e,t,c.clone(n),a)))});break;default:return i(new a(l.EINVAL,"Invalid FileMode object."))}}}openSync(e,t,n){if(t.isWriteable())throw new a(l.EPERM,e);const i=this._index.getInode(e);if(null===i)throw a.ENOENT(e);if(!A(i))throw a.EISDIR(e);{const n=i.getData();switch(t.pathExistsAction()){case o.THROW_EXCEPTION:case o.TRUNCATE_FILE:throw a.EEXIST(e);case o.NOP:if(n.fileData)return new r(this,e,t,c.clone(n),n.fileData);const i=this._requestFileSync(e,"buffer");return n.size=i.length,n.fileData=i,new r(this,e,t,c.clone(n),i);default:throw new a(l.EINVAL,"Invalid FileMode object.")}}}readdir(e,t){try{t(null,this.readdirSync(e))}catch(e){t(e)}}readdirSync(e){const t=this._index.getInode(e);if(null===t)throw a.ENOENT(e);if(D(t))return t.getListing();throw a.ENOTDIR(e)}readFile(e,t,n,i){const r=i;this.open(e,n,420,function(e,n){if(e)return i(e);i=function(e,t){n.close(function(n){return e||(e=n),r(e,t)})};const s=n.getBuffer();null===t?i(e,I(s)):function(e,t,n){try{n(null,e.toString(t))}catch(e){n(e)}}(s,t,i)})}readFileSync(e,t,n){const i=this.openSync(e,n,420);try{const e=i.getBuffer();return null===t?I(e):e.toString(t)}finally{i.closeSync()}}_getHTTPPath(e){return"/"===e.charAt(0)&&(e=e.slice(1)),this.prefixUrl+e}_requestFileAsync(e,t,n){this._requestFileAsyncInternal(this._getHTTPPath(e),t,n)}_requestFileSync(e,t){return this._requestFileSyncInternal(this._getHTTPPath(e),t)}_requestFileSizeAsync(e,t){this._requestFileSizeAsyncInternal(this._getHTTPPath(e),t)}_requestFileSizeSync(e){return this._requestFileSizeSyncInternal(this._getHTTPPath(e))}}return b.Name="http",b.Options={index:{type:["string","object"],optional:!0,description:"URL to a file index as a JSON file or the file index object itself, generated with the make_http_index script. Defaults to `index.json`."},baseUrl:{type:"string",optional:!0,description:"Used as the URL prefix for fetched files. Default: Fetch files relative to the index."},preferXHR:{type:"boolean",optional:!0,description:"Whether to prefer XmlHttpRequest or fetch for async operations if both are available. Default: false"}},i.add("http",b),n.providers.HttpProvider=b});
//# sourceMappingURL=../../sourcemaps/providers/http/http-provider.js.map
